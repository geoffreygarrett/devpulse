name: Repository Analysis

on:
  push:
    branches: [
      "master",
      "develop",
      "feature/*"
    ]
  pull_request:
    branches: [
      "master",
      "develop",
      "feature/*"
    ]

jobs:
  repository-analysis:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Fetch the last 2 commits to identify start and end commits

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Step 3: Install required Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Step 4: Determine start and end commits
      - name: Determine start and end commits
        run: |
          echo "START_COMMIT=$(git rev-parse HEAD~1)" >> $GITHUB_ENV
          echo "END_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Step 5: Perform repository analysis by calling the API
      - name: Perform repository analysis
        env:
          REPOSITORY_URL: "https://github.com/${{ github.repository }}"
          START_COMMIT: ${{ env.START_COMMIT }}
          END_COMMIT: ${{ env.END_COMMIT }}
        run: |
          python - <<EOF
          import requests
          import json

          url = "https://devpulse.shuttleapp.rs/repository/commit-range"
          headers = {"Content-Type": "application/json"}
          data = {
              "repository_url": "${{ env.REPOSITORY_URL }}",
              "start_commit": "${{ env.START_COMMIT }}",
              "end_commit": "${{ env.END_COMMIT }}"
          }

          response = requests.post(url, headers=headers, data=json.dumps(data))
          result = response.json()

          if response.status_code == 200:
              print("Success: ", result)
          else:
              print("Error: ", response.status_code, result.get('message', 'No message available'))
          
          EOF

      # Step 6: Comment on the pull request with the result
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            ### Repository Analysis Result
            ```
            ${{ steps.repository-analysis.outputs.result }}
            ```
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
