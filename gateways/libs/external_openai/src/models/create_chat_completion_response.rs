/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

/// CreateChatCompletionResponse : Represents a chat completion response returned by model, based on the provided input.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct CreateChatCompletionResponse {
    /// A unique identifier for the chat completion.
    #[serde(rename = "id")]
    pub id: String,
    /// A list of chat completion choices. Can be more than one if `n` is greater than 1.
    #[serde(rename = "choices")]
    pub choices: Vec<models::CreateChatCompletionResponseChoicesInner>,
    /// The Unix timestamp (in seconds) of when the chat completion was created.
    #[serde(rename = "created")]
    pub created: i32,
    /// The model used for the chat completion.
    #[serde(rename = "model")]
    pub model: String,
    /// The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
    #[serde(
        rename = "service_tier",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub service_tier: Option<Option<ServiceTier>>,
    /// This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
    #[serde(rename = "system_fingerprint", skip_serializing_if = "Option::is_none")]
    pub system_fingerprint: Option<String>,
    /// The object type, which is always `chat.completion`.
    #[serde(rename = "object")]
    pub object: Object,
    #[serde(rename = "usage", skip_serializing_if = "Option::is_none")]
    pub usage: Option<Box<models::CompletionUsage>>,
}

impl CreateChatCompletionResponse {
    /// Represents a chat completion response returned by model, based on the provided input.
    pub fn new(
        id: String, choices: Vec<models::CreateChatCompletionResponseChoicesInner>, created: i32,
        model: String, object: Object,
    ) -> CreateChatCompletionResponse {
        CreateChatCompletionResponse {
            id,
            choices,
            created,
            model,
            service_tier: None,
            system_fingerprint: None,
            object,
            usage: None,
        }
    }

    pub fn builder() -> CreateChatCompletionResponseBuilder {
        CreateChatCompletionResponseBuilder::create_empty()
    }
}
/// The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceTier {
    #[serde(rename = "scale")]
    Scale,
    #[serde(rename = "default")]
    Default,
}

impl Default for ServiceTier {
    fn default() -> ServiceTier {
        Self::Scale
    }
}
/// The object type, which is always `chat.completion`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "chat.completion")]
    ChatPeriodCompletion,
}

impl Default for Object {
    fn default() -> Object {
        Self::ChatPeriodCompletion
    }
}
