/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use derive_builder::Builder;
use serde::Serialize;
use std::sync::Arc;

#[derive(Debug, Clone, Builder, Serialize)]
#[builder(setter(strip_option, into), default)]
pub struct Configuration {
    pub base_path: String,
    pub user_agent: Option<String>,
    #[serde(skip)]
    pub client: Arc<reqwest::Client>,
    pub basic_auth: Option<BasicAuth>,
    pub oauth_access_token: Option<String>,
    pub bearer_access_token: Option<String>,
    pub api_key: Option<ApiKey>,
    // TODO: take an oauth2 token source, similar to the go one
}

// Manually implement PartialEq and Eq, excluding the client field
impl PartialEq for Configuration {
    fn eq(&self, other: &Self) -> bool {
        self.base_path == other.base_path
            && self.user_agent == other.user_agent
            && self.basic_auth == other.basic_auth
            && self.oauth_access_token == other.oauth_access_token
            && self.bearer_access_token == other.bearer_access_token
            && self.api_key == other.api_key
    }
}

impl Eq for Configuration {}

pub type BasicAuth = (String, Option<String>);
#[derive(Debug, Clone, Builder, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into))]
pub struct ApiKey {
    pub prefix: Option<String>,
    pub key: String,
}

impl Configuration {
    pub fn new() -> Configuration {
        Configuration::default()
    }
    pub fn builder() -> ConfigurationBuilder {
        ConfigurationBuilder::default()
    }
}

impl Default for Configuration {
    fn default() -> Self {
        Configuration {
            base_path: "https://api.openai.com/v1".to_owned(),
            user_agent: Some("OpenAPI-Generator/2.1.0/rust".to_owned()),
            client: Arc::new(reqwest::Client::new()),
            basic_auth: None,
            oauth_access_token: None,
            bearer_access_token: None,
            api_key: None,
        }
    }
}
