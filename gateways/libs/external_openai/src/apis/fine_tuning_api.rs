/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};

#[macro_export]
macro_rules! generate_fine_tuning_api_client_methods {
    () => {
        /// cancel_fine_tuning_job method
        pub async fn cancel_fine_tuning_job(
            &self, params: CancelFineTuningJobParams,
        ) -> Result<models::FineTuningJob, Error<CancelFineTuningJobError>> {
            let result =
                crate::apis::fine_tuning_api::cancel_fine_tuning_job(&self.config, params).await?;
            Ok(result)
        }
        /// list_fine_tuning_events method
        pub async fn list_fine_tuning_events(
            &self, params: ListFineTuningEventsParams,
        ) -> Result<models::ListFineTuningJobEventsResponse, Error<ListFineTuningEventsError>> {
            let result =
                crate::apis::fine_tuning_api::list_fine_tuning_events(&self.config, params).await?;
            Ok(result)
        }
        /// list_fine_tuning_job_checkpoints method
        pub async fn list_fine_tuning_job_checkpoints(
            &self, params: ListFineTuningJobCheckpointsParams,
        ) -> Result<
            models::ListFineTuningJobCheckpointsResponse,
            Error<ListFineTuningJobCheckpointsError>,
        > {
            let result = crate::apis::fine_tuning_api::list_fine_tuning_job_checkpoints(
                &self.config,
                params,
            )
            .await?;
            Ok(result)
        }
        /// list_paginated_fine_tuning_jobs method
        pub async fn list_paginated_fine_tuning_jobs(
            &self, params: ListPaginatedFineTuningJobsParams,
        ) -> Result<
            models::ListPaginatedFineTuningJobsResponse,
            Error<ListPaginatedFineTuningJobsError>,
        > {
            let result =
                crate::apis::fine_tuning_api::list_paginated_fine_tuning_jobs(&self.config, params)
                    .await?;
            Ok(result)
        }
        /// retrieve_fine_tuning_job method
        pub async fn retrieve_fine_tuning_job(
            &self, params: RetrieveFineTuningJobParams,
        ) -> Result<models::FineTuningJob, Error<RetrieveFineTuningJobError>> {
            let result =
                crate::apis::fine_tuning_api::retrieve_fine_tuning_job(&self.config, params)
                    .await?;
            Ok(result)
        }
    };
}

#[macro_export]
macro_rules! generate_fine_tuning_api_client {
() => {
    use std::sync::Arc;
    use cached::SizedCache;
    use reqwest::Client;

    pub struct Fine TuningApi<'a> {
        config: &'a Arc<configuration::Configuration>,
        client: Client,
    }

    impl<'a> Fine TuningApi<'a> {
        pub fn new(config: &'a Arc<configuration::Configuration>) -> Self {
            Fine TuningApi {
                config,
                client: Client::new(),
            }
        }
        /// cancel_fine_tuning_job method
        pub async  fn cancelfinetuningjob(&self, params: CancelFineTuningJobParams) ->
            Result<models::FineTuningJob, Error<CancelFineTuningJobError>> {
            let result = crate::apis::fine_tuning_api::cancel_fine_tuning_job(&self.config, params).await?;
            Ok(result)
        }
        /// list_fine_tuning_events method
        pub async  fn listfinetuningevents(&self, params: ListFineTuningEventsParams) ->
            Result<models::ListFineTuningJobEventsResponse, Error<ListFineTuningEventsError>> {
            let result = crate::apis::fine_tuning_api::list_fine_tuning_events(&self.config, params).await?;
            Ok(result)
        }
        /// list_fine_tuning_job_checkpoints method
        pub async  fn listfinetuningjobcheckpoints(&self, params: ListFineTuningJobCheckpointsParams) ->
            Result<models::ListFineTuningJobCheckpointsResponse, Error<ListFineTuningJobCheckpointsError>> {
            let result = crate::apis::fine_tuning_api::list_fine_tuning_job_checkpoints(&self.config, params).await?;
            Ok(result)
        }
        /// list_paginated_fine_tuning_jobs method
        pub async  fn listpaginatedfinetuningjobs(&self, params: ListPaginatedFineTuningJobsParams) ->
            Result<models::ListPaginatedFineTuningJobsResponse, Error<ListPaginatedFineTuningJobsError>> {
            let result = crate::apis::fine_tuning_api::list_paginated_fine_tuning_jobs(&self.config, params).await?;
            Ok(result)
        }
        /// retrieve_fine_tuning_job method
        pub async  fn retrievefinetuningjob(&self, params: RetrieveFineTuningJobParams) ->
            Result<models::FineTuningJob, Error<RetrieveFineTuningJobError>> {
            let result = crate::apis::fine_tuning_api::retrieve_fine_tuning_job(&self.config, params).await?;
            Ok(result)
        }
    }
}
}

/// struct for passing parameters to the method [`cancel_fine_tuning_job`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct CancelFineTuningJobParams {
    /// The ID of the fine-tuning job to cancel.
    pub fine_tuning_job_id: String,
}

impl CancelFineTuningJobParams {
    pub fn builder() -> CancelFineTuningJobParamsBuilder {
        CancelFineTuningJobParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`list_fine_tuning_events`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct ListFineTuningEventsParams {
    /// The ID of the fine-tuning job to get events for.
    pub fine_tuning_job_id: String,
    /// Identifier for the last event from the previous pagination request.
    pub after: Option<String>,
    /// Number of events to retrieve.
    pub limit: Option<i32>,
}

impl ListFineTuningEventsParams {
    pub fn builder() -> ListFineTuningEventsParamsBuilder {
        ListFineTuningEventsParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`list_fine_tuning_job_checkpoints`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct ListFineTuningJobCheckpointsParams {
    /// The ID of the fine-tuning job to get checkpoints for.
    pub fine_tuning_job_id: String,
    /// Identifier for the last checkpoint ID from the previous pagination request.
    pub after: Option<String>,
    /// Number of checkpoints to retrieve.
    pub limit: Option<i32>,
}

impl ListFineTuningJobCheckpointsParams {
    pub fn builder() -> ListFineTuningJobCheckpointsParamsBuilder {
        ListFineTuningJobCheckpointsParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`list_paginated_fine_tuning_jobs`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct ListPaginatedFineTuningJobsParams {
    /// Identifier for the last job from the previous pagination request.
    pub after: Option<String>,
    /// Number of fine-tuning jobs to retrieve.
    pub limit: Option<i32>,
}

impl ListPaginatedFineTuningJobsParams {
    pub fn builder() -> ListPaginatedFineTuningJobsParamsBuilder {
        ListPaginatedFineTuningJobsParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`retrieve_fine_tuning_job`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct RetrieveFineTuningJobParams {
    /// The ID of the fine-tuning job.
    pub fine_tuning_job_id: String,
}

impl RetrieveFineTuningJobParams {
    pub fn builder() -> RetrieveFineTuningJobParamsBuilder {
        RetrieveFineTuningJobParamsBuilder::default()
    }
}

/// struct for typed errors of method [`cancel_fine_tuning_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelFineTuningJobError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_fine_tuning_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFineTuningEventsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_fine_tuning_job_checkpoints`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFineTuningJobCheckpointsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_paginated_fine_tuning_jobs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPaginatedFineTuningJobsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_fine_tuning_job`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveFineTuningJobError {
    UnknownValue(serde_json::Value),
}

#[tracing::instrument]
pub async fn cancel_fine_tuning_job(
    configuration: &configuration::Configuration, params: CancelFineTuningJobParams,
) -> Result<models::FineTuningJob, Error<CancelFineTuningJobError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let fine_tuning_job_id = params.fine_tuning_job_id;

    debug!("Calling cancel_fine_tuning_job...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
        local_var_configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(fine_tuning_job_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelFineTuningJobError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_fine_tuning_events(
    configuration: &configuration::Configuration, params: ListFineTuningEventsParams,
) -> Result<models::ListFineTuningJobEventsResponse, Error<ListFineTuningEventsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let fine_tuning_job_id = params.fine_tuning_job_id;
    let after = params.after;
    let limit = params.limit;

    debug!("Calling list_fine_tuning_events...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/events",
        local_var_configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(fine_tuning_job_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListFineTuningEventsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_fine_tuning_job_checkpoints(
    configuration: &configuration::Configuration, params: ListFineTuningJobCheckpointsParams,
) -> Result<models::ListFineTuningJobCheckpointsResponse, Error<ListFineTuningJobCheckpointsError>>
{
    let local_var_configuration = configuration;

    // unbox the parameters
    let fine_tuning_job_id = params.fine_tuning_job_id;
    let after = params.after;
    let limit = params.limit;

    debug!("Calling list_fine_tuning_job_checkpoints...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
        local_var_configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(fine_tuning_job_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListFineTuningJobCheckpointsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_paginated_fine_tuning_jobs(
    configuration: &configuration::Configuration, params: ListPaginatedFineTuningJobsParams,
) -> Result<models::ListPaginatedFineTuningJobsResponse, Error<ListPaginatedFineTuningJobsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let after = params.after;
    let limit = params.limit;

    debug!("Calling list_paginated_fine_tuning_jobs...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/fine_tuning/jobs", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListPaginatedFineTuningJobsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn retrieve_fine_tuning_job(
    configuration: &configuration::Configuration, params: RetrieveFineTuningJobParams,
) -> Result<models::FineTuningJob, Error<RetrieveFineTuningJobError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let fine_tuning_job_id = params.fine_tuning_job_id;

    debug!("Calling retrieve_fine_tuning_job...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/fine_tuning/jobs/{fine_tuning_job_id}",
        local_var_configuration.base_path,
        fine_tuning_job_id = crate::apis::urlencode(fine_tuning_job_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RetrieveFineTuningJobError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
