/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};

#[macro_export]
macro_rules! generate_models_api_client_methods {
    () => {
        /// delete_model method
        pub async fn delete_model(
            &self, params: DeleteModelParams,
        ) -> Result<models::DeleteModelResponse, Error<DeleteModelError>> {
            let result = crate::apis::models_api::delete_model(&self.config, params).await?;
            Ok(result)
        }
        /// list_models method
        pub async fn list_models(
            &self,
        ) -> Result<models::ListModelsResponse, Error<ListModelsError>> {
            let result = crate::apis::models_api::list_models(&self.config).await?;
            Ok(result)
        }
        /// retrieve_model method
        pub async fn retrieve_model(
            &self, params: RetrieveModelParams,
        ) -> Result<models::Model, Error<RetrieveModelError>> {
            let result = crate::apis::models_api::retrieve_model(&self.config, params).await?;
            Ok(result)
        }
    };
}

#[macro_export]
macro_rules! generate_models_api_client {
    () => {
        use cached::SizedCache;
        use reqwest::Client;
        use std::sync::Arc;

        pub struct ModelsApi<'a> {
            config: &'a Arc<configuration::Configuration>,
            client: Client,
        }

        impl<'a> ModelsApi<'a> {
            pub fn new(config: &'a Arc<configuration::Configuration>) -> Self {
                ModelsApi {
                    config,
                    client: Client::new(),
                }
            }
            /// delete_model method
            pub async fn deletemodel(
                &self, params: DeleteModelParams,
            ) -> Result<models::DeleteModelResponse, Error<DeleteModelError>> {
                let result = crate::apis::models_api::delete_model(&self.config, params).await?;
                Ok(result)
            }
            /// list_models method
            pub async fn listmodels(
                &self,
            ) -> Result<models::ListModelsResponse, Error<ListModelsError>> {
                let result = crate::apis::models_api::list_models(&self.config, params).await?;
                Ok(result)
            }
            /// retrieve_model method
            pub async fn retrievemodel(
                &self, params: RetrieveModelParams,
            ) -> Result<models::Model, Error<RetrieveModelError>> {
                let result = crate::apis::models_api::retrieve_model(&self.config, params).await?;
                Ok(result)
            }
        }
    };
}

/// struct for passing parameters to the method [`delete_model`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct DeleteModelParams {
    /// The model to delete
    pub model: String,
}

impl DeleteModelParams {
    pub fn builder() -> DeleteModelParamsBuilder {
        DeleteModelParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`retrieve_model`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct RetrieveModelParams {
    /// The ID of the model to use for this request
    pub model: String,
}

impl RetrieveModelParams {
    pub fn builder() -> RetrieveModelParamsBuilder {
        RetrieveModelParamsBuilder::default()
    }
}

/// struct for typed errors of method [`delete_model`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteModelError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_models`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListModelsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_model`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveModelError {
    UnknownValue(serde_json::Value),
}

#[tracing::instrument]
pub async fn delete_model(
    configuration: &configuration::Configuration, params: DeleteModelParams,
) -> Result<models::DeleteModelResponse, Error<DeleteModelError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let model = params.model;

    debug!("Calling delete_model...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/models/{model}",
        local_var_configuration.base_path,
        model = crate::apis::urlencode(model)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteModelError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_models(
    configuration: &configuration::Configuration,
) -> Result<models::ListModelsResponse, Error<ListModelsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters

    debug!("Calling list_models...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/models", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListModelsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn retrieve_model(
    configuration: &configuration::Configuration, params: RetrieveModelParams,
) -> Result<models::Model, Error<RetrieveModelError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let model = params.model;

    debug!("Calling retrieve_model...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/models/{model}",
        local_var_configuration.base_path,
        model = crate::apis::urlencode(model)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RetrieveModelError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
