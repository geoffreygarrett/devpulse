/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

/// PullRequestReviewComment : Pull Request Review Comments are comments on a portion of the Pull Request's diff.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct PullRequestReviewComment {
    /// URL for the pull request review comment
    #[serde(rename = "url")]
    pub url: String,
    /// The ID of the pull request review to which the comment belongs.
    #[serde(
        rename = "pull_request_review_id",
        deserialize_with = "Option::deserialize"
    )]
    pub pull_request_review_id: Option<i64>,
    /// The ID of the pull request review comment.
    #[serde(rename = "id")]
    pub id: i64,
    /// The node ID of the pull request review comment.
    #[serde(rename = "node_id")]
    pub node_id: String,
    /// The diff of the line that the comment refers to.
    #[serde(rename = "diff_hunk")]
    pub diff_hunk: String,
    /// The relative path of the file to which the comment applies.
    #[serde(rename = "path")]
    pub path: String,
    /// The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    /// The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
    #[serde(rename = "original_position", skip_serializing_if = "Option::is_none")]
    pub original_position: Option<i32>,
    /// The SHA of the commit to which the comment applies.
    #[serde(rename = "commit_id")]
    pub commit_id: String,
    /// The SHA of the original commit to which the comment applies.
    #[serde(rename = "original_commit_id")]
    pub original_commit_id: String,
    /// The comment ID to reply to.
    #[serde(rename = "in_reply_to_id", skip_serializing_if = "Option::is_none")]
    pub in_reply_to_id: Option<i32>,
    #[serde(rename = "user")]
    pub user: Box<models::SimpleUser>,
    /// The text of the comment.
    #[serde(rename = "body")]
    pub body: String,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    /// HTML URL for the pull request review comment.
    #[serde(rename = "html_url")]
    pub html_url: String,
    /// URL for the pull request that the review comment belongs to.
    #[serde(rename = "pull_request_url")]
    pub pull_request_url: String,
    #[serde(rename = "author_association")]
    pub author_association: models::AuthorAssociation,
    #[serde(rename = "_links")]
    pub _links: Box<models::PullRequestReviewCommentLinks>,
    /// The first line of the range for a multi-line comment.
    #[serde(
        rename = "start_line",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_line: Option<Option<i32>>,
    /// The first line of the range for a multi-line comment.
    #[serde(
        rename = "original_start_line",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub original_start_line: Option<Option<i32>>,
    /// The side of the first line of the range for a multi-line comment.
    #[serde(
        rename = "start_side",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub start_side: Option<Option<StartSide>>,
    /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    #[serde(rename = "line", skip_serializing_if = "Option::is_none")]
    pub line: Option<i32>,
    /// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
    #[serde(rename = "original_line", skip_serializing_if = "Option::is_none")]
    pub original_line: Option<i32>,
    /// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<Side>,
    /// The level at which the comment is targeted, can be a diff line or a file.
    #[serde(rename = "subject_type", skip_serializing_if = "Option::is_none")]
    pub subject_type: Option<SubjectType>,
    #[serde(rename = "reactions", skip_serializing_if = "Option::is_none")]
    pub reactions: Option<Box<models::ReactionRollup>>,
    #[serde(rename = "body_html", skip_serializing_if = "Option::is_none")]
    pub body_html: Option<String>,
    #[serde(rename = "body_text", skip_serializing_if = "Option::is_none")]
    pub body_text: Option<String>,
}

impl PullRequestReviewComment {
    /// Pull Request Review Comments are comments on a portion of the Pull Request's diff.
    pub fn new(
        url: String, pull_request_review_id: Option<i64>, id: i64, node_id: String,
        diff_hunk: String, path: String, commit_id: String, original_commit_id: String,
        user: models::SimpleUser, body: String, created_at: String, updated_at: String,
        html_url: String, pull_request_url: String, author_association: models::AuthorAssociation,
        _links: models::PullRequestReviewCommentLinks,
    ) -> PullRequestReviewComment {
        PullRequestReviewComment {
            url,
            pull_request_review_id,
            id,
            node_id,
            diff_hunk,
            path,
            position: None,
            original_position: None,
            commit_id,
            original_commit_id,
            in_reply_to_id: None,
            user: Box::new(user),
            body,
            created_at,
            updated_at,
            html_url,
            pull_request_url,
            author_association,
            _links: Box::new(_links),
            start_line: None,
            original_start_line: None,
            start_side: None,
            line: None,
            original_line: None,
            side: None,
            subject_type: None,
            reactions: None,
            body_html: None,
            body_text: None,
        }
    }

    pub fn builder() -> PullRequestReviewCommentBuilder {
        PullRequestReviewCommentBuilder::create_empty()
    }
}
/// The side of the first line of the range for a multi-line comment.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StartSide {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}

impl Default for StartSide {
    fn default() -> StartSide {
        Self::Left
    }
}
/// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
}

impl Default for Side {
    fn default() -> Side {
        Self::Left
    }
}
/// The level at which the comment is targeted, can be a diff line or a file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubjectType {
    #[serde(rename = "line")]
    Line,
    #[serde(rename = "file")]
    File,
}

impl Default for SubjectType {
    fn default() -> SubjectType {
        Self::Line
    }
}
