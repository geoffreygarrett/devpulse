/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct PullRequestHead {
    #[serde(rename = "label")]
    pub label: String,
    #[serde(rename = "ref")]
    pub r#ref: String,
    #[serde(rename = "repo", deserialize_with = "Option::deserialize")]
    pub repo: Option<Box<models::PullRequestHeadRepo>>,
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "user")]
    pub user: Box<models::PullRequestHeadUser>,
}

impl PullRequestHead {
    pub fn new(
        label: String, r#ref: String, repo: Option<models::PullRequestHeadRepo>, sha: String,
        user: models::PullRequestHeadUser,
    ) -> PullRequestHead {
        PullRequestHead {
            label,
            r#ref,
            repo: if let Some(x) = repo {
                Some(Box::new(x))
            } else {
                None
            },
            sha,
            user: Box::new(user),
        }
    }

    pub fn builder() -> PullRequestHeadBuilder {
        PullRequestHeadBuilder::create_empty()
    }
}
