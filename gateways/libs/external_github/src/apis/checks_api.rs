/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};

#[macro_export]
macro_rules! generate_checks_api_client_methods {
    () => {
        /// checks_slash_list_for_ref method
        pub async fn checks_slash_list_for_ref(
            &self, params: ChecksSlashListForRefParams,
        ) -> Result<models::ChecksListForRef200Response, Error<ChecksSlashListForRefError>> {
            let result =
                crate::apis::checks_api::checks_slash_list_for_ref(&self.config, params).await?;
            Ok(result)
        }
    };
}

#[macro_export]
macro_rules! generate_checks_api_client {
    () => {
        use cached::SizedCache;
        use reqwest::Client;
        use std::sync::Arc;

        pub struct ChecksApi<'a> {
            config: &'a Arc<configuration::Configuration>,
            client: Client,
        }

        impl<'a> ChecksApi<'a> {
            pub fn new(config: &'a Arc<configuration::Configuration>) -> Self {
                ChecksApi {
                    config,
                    client: Client::new(),
                }
            }
            /// checks_slash_list_for_ref method
            pub async fn list_for_ref(
                &self, params: ChecksSlashListForRefParams,
            ) -> Result<models::ChecksListForRef200Response, Error<ChecksSlashListForRefError>>
            {
                let result =
                    crate::apis::checks_api::checks_slash_list_for_ref(&self.config, params)
                        .await?;
                Ok(result)
            }
        }
    };
}

/// struct for passing parameters to the method [`checks_slash_list_for_ref`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct ChecksSlashListForRefParams {
    /// The account owner of the repository. The name is not case sensitive.
    pub owner: String,
    /// The name of the repository without the `.git` extension. The name is not case sensitive.
    pub repo: String,
    /// The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.
    pub r#ref: String,
    /// Returns check runs with the specified `name`.
    pub check_name: Option<String>,
    /// Returns check runs with the specified `status`.
    pub status: Option<String>,
    /// Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.
    pub filter: Option<String>,
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub per_page: Option<i32>,
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub page: Option<i32>,
    pub app_id: Option<i32>,
}

impl ChecksSlashListForRefParams {
    pub fn builder() -> ChecksSlashListForRefParamsBuilder {
        ChecksSlashListForRefParamsBuilder::default()
    }
}

/// struct for typed errors of method [`checks_slash_list_for_ref`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChecksSlashListForRefError {
    UnknownValue(serde_json::Value),
}

/// Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.  > [!NOTE] > The endpoints to manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `p
#[tracing::instrument]
pub async fn checks_slash_list_for_ref(
    configuration: &configuration::Configuration, params: ChecksSlashListForRefParams,
) -> Result<models::ChecksListForRef200Response, Error<ChecksSlashListForRefError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let owner = params.owner;
    let repo = params.repo;
    let r#ref = params.r#ref;
    let check_name = params.check_name;
    let status = params.status;
    let filter = params.filter;
    let per_page = params.per_page;
    let page = params.page;
    let app_id = params.app_id;

    debug!("Calling checks_slash_list_for_ref...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/repos/{owner}/{repo}/commits/{ref}/check-runs", local_var_configuration.base_path, owner=crate::apis::urlencode(owner), repo=crate::apis::urlencode(repo), ref=crate::apis::urlencode(r#ref));
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = check_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("check_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder =
            local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = app_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("app_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChecksSlashListForRefError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
