use std::path::PathBuf;

fn generate_external_github_client() {
    // Construct the path to the spec file relative to the project root
    let mut spec_path = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
    spec_path.push("spec/api.github.com.extracted.json");

    // Ensure the spec file exists
    if !spec_path.exists() {
        panic!("The specification file {} does not exist.", spec_path.display());
    }

    // Read and parse the spec file
    let spec = serde_json::from_reader(
        std::fs::File::open(&spec_path).expect("Failed to open specification file"),
    )
    .expect("Failed to read specification file");

    let mut binding = progenitor::GenerationSettings::new();
    let generator_settings = binding.with_interface(progenitor::InterfaceStyle::Builder);
    let mut generator = progenitor::Generator::new(generator_settings);
    let tokens = generator
        .generate_tokens(&spec)
        .expect("Failed to generate tokens");
    let ast = syn::parse2(tokens).expect("Failed to parse tokens");
    let content = prettyplease::unparse(&ast);

    // Construct the output file path
    let mut out_file =
        PathBuf::from(std::env::var("OUT_DIR").expect("OUT_DIR environment variable is not set"));
    out_file.push("__external_github_client.rs");

    // make dir
    std::fs::create_dir_all(out_file.parent().unwrap()).expect("Failed to create output directory");

    // Write the generated code to the output file
    std::fs::write(out_file, content).expect("Failed to write output file");
}

fn main() {
    println!("cargo:rerun-if-changed=build.rs");
    generate_external_github_client();
}
