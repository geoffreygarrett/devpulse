#load("@crates//:defs.bzl", "all_crate_deps")
#load("@rules_rust//rust:defs.bzl", "rust_binary")
#
#package(default_visibility = ["//visibility:public"])
#
## Export the necessary files
#exports_files([
#    "Cargo.toml",
#    "src/main.rs",
#])
#
## Define the Rust binary target
#rust_binary(
#    name = "test",
#    srcs = ["src/main.rs"],
#    crate_root = "src/main.rs",
#    edition = "2021",
#    deps = all_crate_deps(normal = True) + [
#        ":openai_yaml_to_json",
#    ],
#)
#
## Define a genrule to convert OpenAPI YAML to JSON
#genrule(
#    name = "openai_yaml_to_json",
#    srcs = ["@openai_spec//:openapi.yaml"],
#    outs = ["openapi.json"],
#    cmd = "yaml2json $(SRCS) > $(OUTS)",
#    tools = ["@yaml2json_tool//:yaml2json"],
#)

load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@crates//:defs.bzl", "all_crate_deps")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_doc")

package(default_visibility = ["//visibility:public"])

rust_binary(
    name = "all_crate_deps",
    srcs = ["src/main.rs"],
    deps = all_crate_deps(normal = True),
)

rust_doc(
    name = "all_crate_deps_doc",
    crate = ":all_crate_deps",
)

sh_test(
    name = "all_crate_deps_test",
    size = "small",
    srcs = ["all_crate_deps_test.sh"],
    args = [
        "$(rlocationpath :all_crate_deps)",
    ],
    data = [
        ":all_crate_deps",
    ],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

build_test(
    name = "gen_rust_project",
    targets = [
        "@rules_rust//tools/rust_analyzer:gen_rust_project",
    ],
)

build_test(
    name = "rust_fmt",
    targets = [
        "@rules_rust//:rustfmt",
    ],
)
