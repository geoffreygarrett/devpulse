// use std::collections::{HashSet, VecDeque};
// use std::path::PathBuf;
//
// use reqwest::Error as ReqwestError;
// use serde_json::Value;
// use utoipa::openapi::{OpenApi as UtoipaOpenApi, OpenApiBuilder};
//
// async fn download_spec(url: &str) -> Result<String, ReqwestError> {
//     reqwest::get(url).await?.text().await
// }
//
// fn filter_operations(spec: &mut Value, operation_ids: &HashSet<&str>) {
//     let paths = spec["paths"].as_object_mut().unwrap();
//     let paths_to_retain = paths
//         .iter()
//         .filter_map(|(path, methods)| {
//             let should_retain = methods.as_object().unwrap().iter().any(|(_, details)| {
//                 details["operationId"]
//                     .as_str()
//                     .map_or(false, |id| operation_ids.contains(id))
//             });
//             if should_retain {
//                 Some(path.clone())
//             } else {
//                 None
//             }
//         })
//         .collect::<HashSet<_>>();
//
//     paths.retain(|key, _| paths_to_retain.contains(key));
// }
//
// fn extract_referenced_components(spec: &Value) -> HashSet<String> {
//     let mut references = HashSet::new();
//     let mut queue = VecDeque::new();
//     let mut checked = HashSet::new();
//
//     queue.extend(spec["paths"].as_object().unwrap().values());
//
//     while let Some(item) = queue.pop_front() {
//         recursive_extract_references(item, &mut references, &mut queue, &mut checked);
//     }
//
//     references
// }
//
// fn recursive_extract_references<'a>(
//     value: &'a Value, references: &mut HashSet<String>, queue: &mut VecDeque<&'a Value>,
//     checked: &mut HashSet<String>,
// ) {
//     match value {
//         Value::Object(obj) => {
//             for (k, v) in obj {
//                 if k == "$ref" && v.is_string() {
//                     if let Some(ref_str) = v.as_str() {
//                         if references.insert(ref_str.to_string()) {
//                             // Only add to the queue if it's a new reference
//                             queue.push_back(v);
//                         }
//                     }
//                 } else {
//                     queue.push_back(v);
//                 }
//             }
//         }
//         Value::Array(arr) => {
//             for item in arr {
//                 queue.push_back(item);
//             }
//         }
//         _ => {}
//     }
// }
//
// fn filter_components(spec: &mut Value, referenced: &HashSet<String>) {
//     if let Some(components) = spec.get_mut("components") {
//         for (key, value) in components.as_object_mut().unwrap().iter_mut() {
//             value.as_object_mut().unwrap().retain(|k, _v| {
//                 let ref_path = format!("#/components/{}/{}", key, k);
//                 referenced.contains(&ref_path)
//             });
//         }
//     }
// }
//
// fn main() {
//     println!("cargo:rerun-if-changed=build.rs");
//
//     let target_spec_url = "https://github.com/github/rest-api-description/raw/main/descriptions/api.github.com/api.github.com.2022-11-28.json";
//     let operation_ids_needed = HashSet::from(["get_user", "list_user_repos"]); // Example operation IDs
//
//     let runtime = tokio::runtime::Runtime::new().unwrap();
//     let spec_json = runtime.block_on(download_spec(target_spec_url)).unwrap();
//     let mut spec: UtoipaOpenApi = serde_json::from_str(&spec_json).unwrap();
//
//     let builder = OpenApiBuilder::new();
//     let mut paths: Vec<utoipa::openapi::PathItem> = vec![];
//
//     let focused_spec = serde_json::to_string_pretty(&spec).unwrap();
//
//     let mut spec_path = PathBuf::from(std::env::var("OUT_DIR").unwrap());
//     spec_path.push("filtered_spec.json");
//     std::fs::write(&spec_path, focused_spec).unwrap();
//
//     // Progenitor code generation logic follows
//     let file = std::fs::File::open(spec_path).unwrap();
//     let spec = serde_json::from_reader(file).unwrap();
//     let mut binding = progenitor::GenerationSettings::new();
//     let generator_settings = binding.with_interface(progenitor::InterfaceStyle::Builder);
//     let mut generator = progenitor::Generator::new(generator_settings);
//     let tokens = generator.generate_tokens(&spec).unwrap();
//     let ast = syn::parse2(tokens).unwrap();
//     let content = prettyplease::unparse(&ast);
//
//     let mut out_file = PathBuf::from(std::env::var("OUT_DIR").unwrap());
//     out_file.push("codegen.rs");
//     std::fs::write(out_file, content).unwrap();
// }
