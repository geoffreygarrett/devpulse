/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use derive_builder::Builder;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct CommitCommitTree {
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "url")]
    pub url: String,
}

impl CommitCommitTree {
    pub fn new(sha: String, url: String) -> CommitCommitTree {
        CommitCommitTree { sha, url }
    }

    pub fn builder() -> CommitCommitTreeBuilder {
        CommitCommitTreeBuilder::create_empty()
    }
}

mod _impl_github {
    use external_github;

    impl From<external_github::models::CommitCommitTree> for super::CommitCommitTree {
        fn from(x: external_github::models::CommitCommitTree) -> Self {
            Self {
                sha: x.sha,
                url: x.url,
            }
        }
    }
    impl From<super::CommitCommitTree> for external_github::models::CommitCommitTree {
        fn from(x: super::CommitCommitTree) -> Self {
            Self {
                sha: x.sha,
                url: x.url,
            }
        }
    }

    impl From<Box<external_github::models::CommitCommitTree>> for super::CommitCommitTree {
        fn from(x: Box<external_github::models::CommitCommitTree>) -> Self {
            Self {
                sha: x.sha,
                url: x.url,
            }
        }
    }
}
