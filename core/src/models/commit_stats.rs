/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use derive_builder::Builder;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct CommitStats {
    #[serde(rename = "additions", skip_serializing_if = "Option::is_none")]
    pub additions: Option<i32>,
    #[serde(rename = "deletions", skip_serializing_if = "Option::is_none")]
    pub deletions: Option<i32>,
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<i32>,
}

impl CommitStats {
    pub fn new() -> CommitStats {
        CommitStats {
            additions: None,
            deletions: None,
            total: None,
        }
    }

    pub fn builder() -> CommitStatsBuilder {
        CommitStatsBuilder::create_empty()
    }
}

mod _impl_github {
    use external_github;

    use super::*;

    impl From<external_github::models::CommitStats> for CommitStats {
        fn from(internal: external_github::models::CommitStats) -> Self {
            Self {
                additions: internal.additions,
                deletions: internal.deletions,
                total: internal.total,
            }
        }
    }

    impl From<CommitStats> for external_github::models::CommitStats {
        fn from(internal: CommitStats) -> Self {
            Self {
                additions: internal.additions,
                deletions: internal.deletions,
                total: internal.total,
            }
        }
    }
}
