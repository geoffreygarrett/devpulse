use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize, Debug)]
struct PullRequest {
    url: String,
    id: i64,
    node_id: String,
    html_url: String,
    diff_url: String,
    patch_url: String,
    issue_url: String,
    commits_url: String,
    review_comments_url: String,
    review_comment_url: String,
    comments_url: String,
    statuses_url: String,
    number: i32,
    state: String,
    locked: bool,
    title: String,
    user: User,
    body: Option<String>,
    labels: Vec<Label>,
    milestone: Option<Milestone>,
    active_lock_reason: Option<String>,
    created_at: String,
    updated_at: String,
    closed_at: Option<String>,
    merged_at: Option<String>,
    merge_commit_sha: Option<String>,
    assignee: Option<User>,
    assignees: Vec<User>,
    requested_reviewers: Vec<User>,
    requested_teams: Vec<Team>,
    head: GitReference,
    base: GitReference,
    _links: Links,
    author_association: String,
    auto_merge: Option<AutoMerge>,
    draft: bool,
    merged: bool,
    mergeable: Option<bool>,
    rebaseable: Option<bool>,
    mergeable_state: String,
    merged_by: Option<User>,
    comments: i32,
    review_comments: i32,
    maintainer_can_modify: bool,
    commits: i32,
    additions: i32,
    deletions: i32,
    changed_files: i32,
}

#[derive(Serialize, Deserialize, Debug)]
struct User {
    name: Option<String>,
    email: Option<String>,
    login: String,
    id: i64,
    node_id: String,
    avatar_url: String,
    gravatar_id: Option<String>,
    url: String,
    html_url: String,
    followers_url: String,
    following_url: String,
    gists_url: String,
    starred_url: String,
    subscriptions_url: String,
    organizations_url: String,
    repos_url: String,
    events_url: String,
    received_events_url: String,
    #[serde(rename = "type")]
    user_type: String,
    site_admin: bool,
    starred_at: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
struct Label {
    id: i64,
    node_id: String,
    url: String,
    name: String,
    description: Option<String>,
    color: String,
    default: bool,
}

#[derive(Serialize, Deserialize, Debug)]
struct Milestone {
    url: String,
    html_url: String,
    labels_url: String,
    id: i64,
    node_id: String,
    number: i32,
    state: String,
    title: String,
    description: Option<String>,
    creator: Option<User>,
    open_issues: i32,
    closed_issues: i32,
    created_at: String,
    updated_at: String,
    closed_at: Option<String>,
    due_on: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
struct Team {
    id: i64,
    node_id: String,
    url: String,
    members_url: String,
    name: String,
    description: Option<String>,
    permission: String,
    privacy: String,
    notification_setting: String,
    html_url: String,
    repositories_url: String,
    slug: String,
    ldap_dn: Option<String>,
}

#[derive(Serialize, Deserialize, Debug)]
struct GitReference {
    label: String,
    _ref: String,
    sha: String,
    user: User,
    repo: Option<Repository>,
}

#[derive(Serialize, Deserialize, Debug)]
struct Repository {
    id: i64,
    node_id: String,
    name: String,
    full_name: String,
    owner: User,
    private: bool,
    html_url: String,
    description: Option<String>,
    fork: bool,
    url: String,
    forks_url: String,
    keys_url: String,
    collaborators_url: String,
    teams_url: String,
    hooks_url: String,
    issue_events_url: String,
    events_url: String,
    assignees_url: String,
    branches_url: String,
    tags_url: String,
    blobs_url: String,
    git_tags_url: String,
    git_refs_url: String,
    trees_url: String,
    statuses_url: String,
    languages_url: String,
    stargazers_url: String,
    contributors_url: String,
    subscribers_url: String,
    subscription_url: String,
    commits_url: String,
    git_commits_url: String,
    comments_url: String,
    issue_comment_url: String,
    contents_url: String,
    compare_url: String,
    merges_url: String,
    archive_url: String,
    downloads_url: String,
    issues_url: String,
    pulls_url: String,
    milestones_url: String,
    notifications_url: String,
    labels_url: String,
    releases_url: String,
    deployments_url: String,
    created_at: String,
    updated_at: String,
    pushed_at: String,
    git_url: String,
    ssh_url: String,
    clone_url: String,
    svn_url: String,
    homepage: Option<String>,
    size: i32,
    stargazers_count: i32,
    watchers_count: i32,
    language: Option<String>,
    has_issues: bool,
    has_projects: bool,
    has_downloads: bool,
    has_wiki: bool,
    has_pages: bool,
    forks_count: i32,
    mirror_url: Option<String>,
    archived: bool,
    disabled: bool,
    open_issues_count: i32,
    license: Option<License>,
    forks: i32,
    open_issues: i32,
    watchers: i32,
    default_branch: String,
    permissions: RepositoryPermissions,
    allow_rebase_merge: bool,
    allow_squash_merge: bool,
    allow_merge_commit: bool,
    subscribers_count: i32,
    network_count: i32,
}

#[derive(Serialize, Deserialize, Debug)]
struct License {
    key: String,
    name: String,
    spdx_id: Option<String>,
    url: Option<String>,
    node_id: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct RepositoryPermissions {
    admin: bool,
    push: bool,
    pull: bool,
    maintain: Option<bool>,
    triage: Option<bool>,
}

#[derive(Serialize, Deserialize, Debug)]
struct Links {
    html: Link,
    issue: Link,
    comments: Link,
    review_comments: Link,
    review_comment: Link,
    commits: Link,
    statuses: Link,
    _self: Link,
}

#[derive(Serialize, Deserialize, Debug)]
struct Link {
    href: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct AutoMerge {
    enabled_by: User,
    merge_method: String,
    commit_title: Option<String>,
    commit_message: Option<String>,
}
