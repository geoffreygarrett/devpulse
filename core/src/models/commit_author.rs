/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommitAuthor {
    SimpleUser(Box<models::SimpleUser>),
    /// An object without any properties.
    EmptyObject(serde_json::Value),
}

impl Default for CommitAuthor {
    fn default() -> Self {
        Self::SimpleUser(Default::default())
    }
}

mod _impl_github {
    use external_github;

    use super::*;

    impl From<external_github::models::CommitAuthor> for CommitAuthor {
        fn from(internal: external_github::models::CommitAuthor) -> Self {
            match internal {
                external_github::models::CommitAuthor::SimpleUser(internal) => {
                    CommitAuthor::SimpleUser(Box::new((*internal).into()))
                }
                external_github::models::CommitAuthor::EmptyObject(internal) => {
                    CommitAuthor::EmptyObject(internal)
                }
            }
        }
    }

    impl From<CommitAuthor> for external_github::models::CommitAuthor {
        fn from(internal: CommitAuthor) -> Self {
            match internal {
                CommitAuthor::SimpleUser(internal) => {
                    external_github::models::CommitAuthor::SimpleUser(Box::new((*internal).into()))
                }
                CommitAuthor::EmptyObject(internal) => {
                    external_github::models::CommitAuthor::EmptyObject(internal)
                }
            }
        }
    }
}
