{
  "swagger": "2.0",
  "info": {
    "title": "Git",
    "version": "7.2.0"
  },
  "host": "dev.azure.com",
  "schemes": [
    "https"
  ],
  "basePath": "/",
  "paths": {
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}": {
      "get": {
        "tags": [
          "Commits"
        ],
        "x-ms-docs-override-version": "7.2-preview.2",
        "x-ms-vss-resource": "commits",
        "x-ms-vss-method": "GetCommit",
        "x-ms-preview": true,
        "description": "Retrieve a particular commit.",
        "operationId": "Commits_Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "changeCount",
            "description": "The number of changes to include in the result.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.2"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GitCommit"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "Get by ID": {
            "$ref": "./httpExamples/Commits/GET__git_repositories__repositoryId__commits__commitId_.json"
          },
          "With limited changes": {
            "$ref": "./httpExamples/Commits/GET__git_repositories__repositoryId__commits__commitId__changeCount-10.json"
          }
        },
        "x-sub-operation-id": "get",
        "x-group": "commits",
        "x-cache": {
          "enabled": true,
          "params": {
            "ty": "SizedCache<String, String>",
            "create": "{ SizedCache::with_size(100) }",
            "convert": "{ format!(\"{}\", key) }",
            "time": 3600
          }
        }
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/changes": {
      "get": {
        "tags": [
          "Commits"
        ],
        "x-ms-docs-override-version": "7.2-preview.1",
        "x-ms-vss-resource": "changes",
        "x-ms-vss-method": "GetChanges",
        "x-ms-preview": true,
        "description": "Retrieve changes for a particular commit.",
        "operationId": "Commits_Get Changes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "top",
            "description": "The maximum number of changes to return.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of changes to skip.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "$ref": "#/parameters/api-Version-preview.1"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GitCommitChanges"
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ],
        "x-ms-examples": {
          "With changes": {
            "$ref": "./httpExamples/Changes/GET__git_repositories__repositoryId__commits__commitId__changes_top-_top__skip-_skip_.json"
          }
        },
        "x-sub-operation-id": "get_changes",
        "x-group": "commits",
        "x-cache": {
          "enabled": true,
          "params": {
            "ty": "SizedCache<String, String>",
            "create": "{ SizedCache::with_size(100) }",
            "convert": "{ format!(\"{}\", key) }",
            "time": 600
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "accessToken": {
      "type": "basic",
      "description": "Personal access token. Use any value for the user name and the token as the password."
    },
    "oauth2": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
      "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token?client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer&grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer",
      "scopes": {
        "vso.code": "Grants the ability to read source code and metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to search code and get notified about version control events via service hooks.",
        "vso.code_manage": "Grants the ability to read, update, and delete source code, access metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to create and manage code repositories, create and manage pull requests and code reviews, and to receive notifications about version control events via service hooks.",
        "vso.code_write": "Grants the ability to read, update, and delete source code, access metadata about commits, changesets, branches, and other version control artifacts. Also grants the ability to create and manage pull requests and code reviews and to receive notifications about version control events via service hooks.",
        "vso.code_status": "Grants the ability to read and write commit and pull request status.",
        "vso.threads_full": "Grants the ability to read and write to pull request comment threads."
      }
    }
  },
  "security": [
    {
      "accessToken": []
    }
  ],
  "parameters": {
    "api-Version-preview.2": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.2-preview.2' to use this version of the api.",
      "required": true,
      "type": "string"
    },
    "api-Version-preview.1": {
      "name": "api-version",
      "in": "query",
      "description": "Version of the API to use.  This should be set to '7.2-preview.1' to use this version of the api.",
      "required": true,
      "type": "string"
    }
  },
  "definitions": {
    "GitCommit": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GitCommitRef"
        }
      ],
      "properties": {
        "treeId": {
          "type": "string"
        }
      }
    },
    "GitCommitChanges": {
      "description": "",
      "type": "object",
      "properties": {
        "changeCounts": {
          "$ref": "#/definitions/ChangeCountDictionary"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitChange"
          }
        }
      }
    },
    "GitCommitRef": {
      "description": "Provides properties that describe a Git commit and associated metadata.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "A collection of related REST reference links.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "author": {
          "description": "Author of the commit.",
          "$ref": "#/definitions/GitUserDate"
        },
        "changeCounts": {
          "description": "Counts of the types of changes (edits, deletes, etc.) included with the commit.",
          "$ref": "#/definitions/ChangeCountDictionary"
        },
        "changes": {
          "description": "An enumeration of the changes included with the commit.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitChange"
          }
        },
        "comment": {
          "description": "Comment or message of the commit.",
          "type": "string"
        },
        "commentTruncated": {
          "description": "Indicates if the comment is truncated from the full Git commit comment message.",
          "type": "boolean"
        },
        "commitId": {
          "description": "ID (SHA-1) of the commit.",
          "type": "string"
        },
        "committer": {
          "description": "Committer of the commit.",
          "$ref": "#/definitions/GitUserDate"
        },
        "commitTooManyChanges": {
          "description": "Indicates that commit contains too many changes to be displayed",
          "type": "boolean"
        },
        "parents": {
          "description": "An enumeration of the parent commit IDs for this commit.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "push": {
          "description": "The push associated with this commit.",
          "$ref": "#/definitions/GitPushRef"
        },
        "remoteUrl": {
          "description": "Remote URL path to the commit.",
          "type": "string"
        },
        "statuses": {
          "description": "A list of status metadata from services and extensions that may associate additional information to the commit.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitStatus"
          }
        },
        "url": {
          "description": "REST URL for this resource.",
          "type": "string"
        },
        "workItems": {
          "description": "A list of workitems associated with this commit.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        }
      }
    },
    "ChangeCountDictionary": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int32"
          }
        }
      ],
      "properties": {}
    },
    "GitChange": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Change"
        }
      ],
      "properties": {
        "changeId": {
          "description": "ID of the change within the group of changes.",
          "type": "integer",
          "format": "int32"
        },
        "newContentTemplate": {
          "description": "New Content template to be used when pushing new changes.",
          "$ref": "#/definitions/GitTemplate"
        },
        "originalPath": {
          "description": "Original path of item if different from current path.",
          "type": "string"
        }
      }
    },
    "ReferenceLinks": {
      "description": "The class to represent a collection of REST reference links.",
      "type": "object",
      "properties": {
        "links": {
          "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "GitUserDate": {
      "description": "User info and date for Git operations.",
      "type": "object",
      "properties": {
        "date": {
          "description": "Date of the Git operation.",
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "description": "Email address of the user performing the Git operation.",
          "type": "string"
        },
        "imageUrl": {
          "description": "Url for the user's avatar.",
          "type": "string"
        },
        "name": {
          "description": "Name of the user performing the Git operation.",
          "type": "string"
        }
      }
    },
    "GitPushRef": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "$ref": "#/definitions/ReferenceLinks"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "pushedBy": {
          "$ref": "#/definitions/IdentityRef"
        },
        "pushId": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "GitStatus": {
      "description": "This class contains the metadata of a service/extension posting a status.",
      "type": "object",
      "properties": {
        "_links": {
          "description": "Reference links.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "context": {
          "description": "Context of the status.",
          "$ref": "#/definitions/GitStatusContext"
        },
        "createdBy": {
          "description": "Identity that created the status.",
          "$ref": "#/definitions/IdentityRef"
        },
        "creationDate": {
          "description": "Creation date and time of the status.",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "Status description. Typically describes current state of the status.",
          "type": "string"
        },
        "id": {
          "description": "Status identifier.",
          "type": "integer",
          "format": "int32"
        },
        "state": {
          "description": "State of the status.",
          "enum": [
            "notSet",
            "pending",
            "succeeded",
            "failed",
            "error",
            "notApplicable",
            "partiallySucceeded"
          ],
          "x-ms-enum": {
            "name": "GitStatusState",
            "values": [
              {
                "value": "notSet",
                "description": "Status state not set. Default state."
              },
              {
                "value": "pending",
                "description": "Status pending."
              },
              {
                "value": "succeeded",
                "description": "Status succeeded."
              },
              {
                "value": "failed",
                "description": "Status failed."
              },
              {
                "value": "error",
                "description": "Status with an error."
              },
              {
                "value": "notApplicable",
                "description": "Status is not applicable to the target object."
              },
              {
                "value": "partiallySucceeded",
                "description": "Status Partially Succeeded, build finished with warnings."
              }
            ]
          }
        },
        "targetUrl": {
          "description": "URL with status details.",
          "type": "string"
        },
        "updatedDate": {
          "description": "Last update date and time of the status.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResourceRef": {
      "description": "",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Change": {
      "description": "",
      "type": "object",
      "properties": {
        "changeType": {
          "description": "The type of change that was made to the item.",
          "enum": [
            "none",
            "add",
            "edit",
            "encoding",
            "rename",
            "delete",
            "undelete",
            "branch",
            "merge",
            "lock",
            "rollback",
            "sourceRename",
            "targetRename",
            "property",
            "all"
          ],
          "x-ms-enum": {
            "name": "VersionControlChangeType",
            "values": [
              {
                "value": "none",
                "description": ""
              },
              {
                "value": "add",
                "description": ""
              },
              {
                "value": "edit",
                "description": ""
              },
              {
                "value": "encoding",
                "description": ""
              },
              {
                "value": "rename",
                "description": ""
              },
              {
                "value": "delete",
                "description": ""
              },
              {
                "value": "undelete",
                "description": ""
              },
              {
                "value": "branch",
                "description": ""
              },
              {
                "value": "merge",
                "description": ""
              },
              {
                "value": "lock",
                "description": ""
              },
              {
                "value": "rollback",
                "description": ""
              },
              {
                "value": "sourceRename",
                "description": ""
              },
              {
                "value": "targetRename",
                "description": ""
              },
              {
                "value": "property",
                "description": ""
              },
              {
                "value": "all",
                "description": ""
              }
            ]
          }
        },
        "item": {
          "description": "Current version.",
          "type": "string",
          "format": "T"
        },
        "newContent": {
          "description": "Content of the item after the change.",
          "$ref": "#/definitions/ItemContent"
        },
        "sourceServerItem": {
          "description": "Path of the item on the server.",
          "type": "string"
        },
        "url": {
          "description": "URL to retrieve the item.",
          "type": "string"
        }
      }
    },
    "GitTemplate": {
      "description": "",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the Template",
          "type": "string"
        },
        "type": {
          "description": "Type of the Template",
          "type": "string"
        }
      }
    },
    "IdentityRef": {
      "description": "",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/GraphSubjectBase"
        }
      ],
      "properties": {
        "directoryAlias": {
          "description": "Deprecated - Can be retrieved by querying the Graph user referenced in the \"self\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "imageUrl": {
          "description": "Deprecated - Available in the \"avatar\" entry of the IdentityRef \"_links\" dictionary",
          "type": "string"
        },
        "inactive": {
          "description": "Deprecated - Can be retrieved by querying the Graph membership state referenced in the \"membershipState\" entry of the GraphUser \"_links\" dictionary",
          "type": "boolean"
        },
        "isAadIdentity": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)",
          "type": "boolean"
        },
        "isContainer": {
          "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)",
          "type": "boolean"
        },
        "isDeletedInOrigin": {
          "type": "boolean"
        },
        "profileUrl": {
          "description": "Deprecated - not in use in most preexisting implementations of ToIdentityRef",
          "type": "string"
        },
        "uniqueName": {
          "description": "Deprecated - use Domain+PrincipalName instead",
          "type": "string"
        }
      }
    },
    "GitStatusContext": {
      "description": "Status context that uniquely identifies the status.",
      "type": "object",
      "properties": {
        "genre": {
          "description": "Genre of the status. Typically name of the service/tool generating the status, can be empty.",
          "type": "string"
        },
        "name": {
          "description": "Name identifier of the status, cannot be null or empty.",
          "type": "string"
        }
      }
    },
    "ItemContent": {
      "description": "",
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "enum": [
            "rawText",
            "base64Encoded"
          ],
          "x-ms-enum": {
            "name": "ItemContentType",
            "values": [
              {
                "value": "rawText",
                "description": ""
              },
              {
                "value": "base64Encoded",
                "description": ""
              }
            ]
          }
        }
      }
    },
    "GraphSubjectBase": {
      "description": "",
      "type": "object",
      "properties": {
        "_links": {
          "description": "This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.",
          "$ref": "#/definitions/ReferenceLinks"
        },
        "descriptor": {
          "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.",
          "type": "string"
        },
        "displayName": {
          "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
          "type": "string"
        },
        "url": {
          "description": "This url is the full route to the source resource of this graph subject.",
          "type": "string"
        }
      }
    }
  }
}