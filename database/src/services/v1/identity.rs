// use async_trait::async_trait;
// use db_auth_v1::{
//     GetIdentitiesRequest,
//     IdentitiesResponse, Identity, identity_service_server::{IdentityService, IdentityServiceServer}, IdentityCreate,
// };
// use tonic::{Request, Response, Status};
//
// pub struct IdentityServiceImpl<T: DataAccess<D>> {
//     repository: T,
// }
//
// #[async_trait]
// impl<Repo> IdentityService for IdentityServiceImpl<Repo>
// where
//     Repo: IdentityRepository + Sync + Send,
// {
//     async fn add_identity(
//         &self, request: Request<IdentityCreate>,
//     ) -> Result<Response<Identity>, Status> {
//         let identity_create = request.into_inner();
//         let identity = Identity {
//             id: 0, // Assuming the ID is generated by the database
//             account_id: identity_create.account_id,
//             source: identity_create.source,
//         };
//
//         self.repository
//             .save(&identity)
//             .await
//             .map_err(|e| Status::internal(format!("Failed to add identity: {}", e)))?;
//         Ok(Response::new(identity))
//     }
//
//     async fn get_identities_for_account(
//         &self, request: Request<GetIdentitiesRequest>,
//     ) -> Result<Response<IdentitiesResponse>, Status> {
//         let account_id = request.into_inner().account_id;
//         let identities = self
//             .repository
//             .find_by_account_id(account_id as u64)
//             .await
//             .map_err(|e| Status::internal(format!("Failed to get identities: {}", e)))?;
//         Ok(Response::new(IdentitiesResponse { identities }))
//     }
// }
