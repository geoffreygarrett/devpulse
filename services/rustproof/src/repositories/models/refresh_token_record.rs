use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use uuid::Uuid;

/// Represents a refresh token stored in the database.
///
/// This struct corresponds to the `refresh_tokens` table in the database.
#[derive(Debug, Serialize, Deserialize)]
#[cfg_attr(feature = "adapter-postgres", derive(sqlx::FromRow))]
pub struct RefreshTokenRecord {
    /// Unique identifier for the refresh token.
    pub id: Uuid,

    /// The refresh token string.
    pub token: String,

    /// The ID of the user associated with this refresh token.
    pub user_id: Uuid,

    /// Optional ID of the parent token, if this token was generated by refreshing another token.
    pub parent_token_id: Option<Uuid>,

    /// Indicates whether the token has been revoked.
    pub revoked: bool,

    /// The timestamp when the token was created.
    pub created_at: DateTime<Utc>,

    /// The timestamp when the token was last updated.
    pub updated_at: DateTime<Utc>,

    /// The ID of the session associated with this refresh token.
    pub session_id: Option<Uuid>,

    /// The ID of the instance associated with this refresh token.
    pub instance_id: Uuid,
}

impl RefreshTokenRecord {
    /// Creates a new `RefreshTokenRecord` with the given parameters.
    ///
    /// # Arguments
    ///
    /// * `token` - The refresh token string.
    /// * `user_id` - The ID of the user associated with this token.
    /// * `session_id` - The ID of the session associated with this token.
    ///
    /// # Returns
    ///
    /// A new `RefreshTokenRecord`.
    pub fn new(token: String, user_id: Uuid, session_id: Option<Uuid>) -> Self {
        Self {
            id: Uuid::new_v4(),
            token,
            user_id,
            parent_token_id: None,
            revoked: false,
            created_at: Utc::now(),
            updated_at: Utc::now(),
            session_id,
            instance_id: Uuid::nil(), // Default to the nil UUID for instance_id
        }
    }
}
