/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

/// Model : Describes an OpenAI model offering that can be used with the API.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct ApiModel {
    /// The model identifier, which can be referenced in the API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The Unix timestamp (in seconds) when the model was created.
    #[serde(rename = "created")]
    pub created: i32,
    /// The object type, which is always \"model\".
    #[serde(rename = "object")]
    pub object: Object,
    /// The organization that owns the model.
    #[serde(rename = "owned_by")]
    pub owned_by: String,
}

impl Model {
    /// Describes an OpenAI model offering that can be used with the API.
    pub fn new(id: String, created: i32, object: Object, owned_by: String) -> Model {
        Model {
            id,
            created,
            object,
            owned_by,
        }
    }

    pub fn builder() -> ModelBuilder {
        ModelBuilder::create_empty()
    }
}
/// The object type, which is always \"model\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "model")]
    Model,
}

impl Default for Object {
    fn default() -> Object {
        Self::Model
    }
}
