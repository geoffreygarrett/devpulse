/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

/// Upload : The Upload object can accept byte chunks in the form of Parts.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct Upload {
    /// The Upload unique identifier, which can be referenced in API endpoints.
    #[serde(rename = "id")]
    pub id: String,
    /// The Unix timestamp (in seconds) for when the Upload was created.
    #[serde(rename = "created_at")]
    pub created_at: i32,
    /// The name of the file to be uploaded.
    #[serde(rename = "filename")]
    pub filename: String,
    /// The intended number of bytes to be uploaded.
    #[serde(rename = "bytes")]
    pub bytes: i32,
    /// The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
    #[serde(rename = "purpose")]
    pub purpose: String,
    /// The status of the Upload.
    #[serde(rename = "status")]
    pub status: Status,
    /// The Unix timestamp (in seconds) for when the Upload was created.
    #[serde(rename = "expires_at")]
    pub expires_at: i32,
    /// The object type, which is always \"upload\".
    #[serde(rename = "object", skip_serializing_if = "Option::is_none")]
    pub object: Option<Object>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<Box<models::OpenAiFile>>,
}

impl Upload {
    /// The Upload object can accept byte chunks in the form of Parts.
    pub fn new(
        id: String, created_at: i32, filename: String, bytes: i32, purpose: String, status: Status,
        expires_at: i32,
    ) -> Upload {
        Upload {
            id,
            created_at,
            filename,
            bytes,
            purpose,
            status,
            expires_at,
            object: None,
            file: None,
        }
    }

    pub fn builder() -> UploadBuilder {
        UploadBuilder::create_empty()
    }
}
/// The status of the Upload.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "cancelled")]
    Cancelled,
    #[serde(rename = "expired")]
    Expired,
}

impl Default for Status {
    fn default() -> Status {
        Self::Pending
    }
}
/// The object type, which is always \"upload\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Object {
    #[serde(rename = "upload")]
    Upload,
}

impl Default for Object {
    fn default() -> Object {
        Self::Upload
    }
}
