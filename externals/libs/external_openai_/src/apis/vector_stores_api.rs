/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};
/// struct for passing parameters to the method [`cancel_vector_store_file_batch`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CancelVectorStoreFileBatchParams {
    /// The ID of the vector store that the file batch belongs to.
    pub vector_store_id: String,
    /// The ID of the file batch to cancel.
    pub batch_id: String,
}

impl CancelVectorStoreFileBatchParams {
    pub fn builder() -> CancelVectorStoreFileBatchParamsBuilder {
        CancelVectorStoreFileBatchParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`create_vector_store`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateVectorStoreParams {
    pub create_vector_store_request: models::CreateVectorStoreRequest,
}

impl CreateVectorStoreParams {
    pub fn builder() -> CreateVectorStoreParamsBuilder {
        CreateVectorStoreParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`create_vector_store_file`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateVectorStoreFileParams {
    /// The ID of the vector store for which to create a File.
    pub vector_store_id: String,
    pub create_vector_store_file_request: models::CreateVectorStoreFileRequest,
}

impl CreateVectorStoreFileParams {
    pub fn builder() -> CreateVectorStoreFileParamsBuilder {
        CreateVectorStoreFileParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`create_vector_store_file_batch`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateVectorStoreFileBatchParams {
    /// The ID of the vector store for which to create a File Batch.
    pub vector_store_id: String,
    pub create_vector_store_file_batch_request: models::CreateVectorStoreFileBatchRequest,
}

impl CreateVectorStoreFileBatchParams {
    pub fn builder() -> CreateVectorStoreFileBatchParamsBuilder {
        CreateVectorStoreFileBatchParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`delete_vector_store`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct DeleteVectorStoreParams {
    /// The ID of the vector store to delete.
    pub vector_store_id: String,
}

impl DeleteVectorStoreParams {
    pub fn builder() -> DeleteVectorStoreParamsBuilder {
        DeleteVectorStoreParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`delete_vector_store_file`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct DeleteVectorStoreFileParams {
    /// The ID of the vector store that the file belongs to.
    pub vector_store_id: String,
    /// The ID of the file to delete.
    pub file_id: String,
}

impl DeleteVectorStoreFileParams {
    pub fn builder() -> DeleteVectorStoreFileParamsBuilder {
        DeleteVectorStoreFileParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`get_vector_store`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct GetVectorStoreParams {
    /// The ID of the vector store to retrieve.
    pub vector_store_id: String,
}

impl GetVectorStoreParams {
    pub fn builder() -> GetVectorStoreParamsBuilder {
        GetVectorStoreParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`get_vector_store_file`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct GetVectorStoreFileParams {
    /// The ID of the vector store that the file belongs to.
    pub vector_store_id: String,
    /// The ID of the file being retrieved.
    pub file_id: String,
}

impl GetVectorStoreFileParams {
    pub fn builder() -> GetVectorStoreFileParamsBuilder {
        GetVectorStoreFileParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`get_vector_store_file_batch`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct GetVectorStoreFileBatchParams {
    /// The ID of the vector store that the file batch belongs to.
    pub vector_store_id: String,
    /// The ID of the file batch being retrieved.
    pub batch_id: String,
}

impl GetVectorStoreFileBatchParams {
    pub fn builder() -> GetVectorStoreFileBatchParamsBuilder {
        GetVectorStoreFileBatchParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`list_files_in_vector_store_batch`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct ListFilesInVectorStoreBatchParams {
    /// The ID of the vector store that the files belong to.
    pub vector_store_id: String,
    /// The ID of the file batch that the files belong to.
    pub batch_id: String,
    /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
    pub limit: Option<i32>,
    /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
    pub order: Option<String>,
    /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    pub after: Option<String>,
    /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
    pub before: Option<String>,
    /// Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
    pub filter: Option<String>,
}

impl ListFilesInVectorStoreBatchParams {
    pub fn builder() -> ListFilesInVectorStoreBatchParamsBuilder {
        ListFilesInVectorStoreBatchParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`list_vector_store_files`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct ListVectorStoreFilesParams {
    /// The ID of the vector store that the files belong to.
    pub vector_store_id: String,
    /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
    pub limit: Option<i32>,
    /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
    pub order: Option<String>,
    /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    pub after: Option<String>,
    /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
    pub before: Option<String>,
    /// Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
    pub filter: Option<String>,
}

impl ListVectorStoreFilesParams {
    pub fn builder() -> ListVectorStoreFilesParamsBuilder {
        ListVectorStoreFilesParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`list_vector_stores`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct ListVectorStoresParams {
    /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
    pub limit: Option<i32>,
    /// Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
    pub order: Option<String>,
    /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    pub after: Option<String>,
    /// A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
    pub before: Option<String>,
}

impl ListVectorStoresParams {
    pub fn builder() -> ListVectorStoresParamsBuilder {
        ListVectorStoresParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`modify_vector_store`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct ModifyVectorStoreParams {
    /// The ID of the vector store to modify.
    pub vector_store_id: String,
    pub update_vector_store_request: models::UpdateVectorStoreRequest,
}

impl ModifyVectorStoreParams {
    pub fn builder() -> ModifyVectorStoreParamsBuilder {
        ModifyVectorStoreParamsBuilder::default()
    }
}

/// struct for typed errors of method [`cancel_vector_store_file_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelVectorStoreFileBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_vector_store_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVectorStoreFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_vector_store_file_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVectorStoreFileBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_vector_store_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteVectorStoreFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVectorStoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_vector_store_file`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVectorStoreFileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_vector_store_file_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVectorStoreFileBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_files_in_vector_store_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListFilesInVectorStoreBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_vector_store_files`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVectorStoreFilesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_vector_stores`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVectorStoresError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`modify_vector_store`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ModifyVectorStoreError {
    UnknownValue(serde_json::Value),
}

#[tracing::instrument]
pub async fn cancel_vector_store_file_batch(
    configuration: &configuration::Configuration, params: CancelVectorStoreFileBatchParams,
) -> Result<models::VectorStoreFileBatchObject, Error<CancelVectorStoreFileBatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let batch_id = params.batch_id;

    debug!("Calling cancel_vector_store_file_batch...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id),
        batch_id = crate::apis::urlencode(batch_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelVectorStoreFileBatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn create_vector_store(
    configuration: &configuration::Configuration, params: CreateVectorStoreParams,
) -> Result<models::VectorStoreObject, Error<CreateVectorStoreError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_vector_store_request = params.create_vector_store_request;

    debug!("Calling create_vector_store...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/vector_stores", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_vector_store_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateVectorStoreError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn create_vector_store_file(
    configuration: &configuration::Configuration, params: CreateVectorStoreFileParams,
) -> Result<models::VectorStoreFileObject, Error<CreateVectorStoreFileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let create_vector_store_file_request = params.create_vector_store_file_request;

    debug!("Calling create_vector_store_file...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/files",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_vector_store_file_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateVectorStoreFileError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn create_vector_store_file_batch(
    configuration: &configuration::Configuration, params: CreateVectorStoreFileBatchParams,
) -> Result<models::VectorStoreFileBatchObject, Error<CreateVectorStoreFileBatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let create_vector_store_file_batch_request = params.create_vector_store_file_batch_request;

    debug!("Calling create_vector_store_file_batch...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/file_batches",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_vector_store_file_batch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateVectorStoreFileBatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn delete_vector_store(
    configuration: &configuration::Configuration, params: DeleteVectorStoreParams,
) -> Result<models::DeleteVectorStoreResponse, Error<DeleteVectorStoreError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;

    debug!("Calling delete_vector_store...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteVectorStoreError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn delete_vector_store_file(
    configuration: &configuration::Configuration, params: DeleteVectorStoreFileParams,
) -> Result<models::DeleteVectorStoreFileResponse, Error<DeleteVectorStoreFileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let file_id = params.file_id;

    debug!("Calling delete_vector_store_file...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/files/{file_id}",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id),
        file_id = crate::apis::urlencode(file_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DeleteVectorStoreFileError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn get_vector_store(
    configuration: &configuration::Configuration, params: GetVectorStoreParams,
) -> Result<models::VectorStoreObject, Error<GetVectorStoreError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;

    debug!("Calling get_vector_store...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVectorStoreError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn get_vector_store_file(
    configuration: &configuration::Configuration, params: GetVectorStoreFileParams,
) -> Result<models::VectorStoreFileObject, Error<GetVectorStoreFileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let file_id = params.file_id;

    debug!("Calling get_vector_store_file...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/files/{file_id}",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id),
        file_id = crate::apis::urlencode(file_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVectorStoreFileError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn get_vector_store_file_batch(
    configuration: &configuration::Configuration, params: GetVectorStoreFileBatchParams,
) -> Result<models::VectorStoreFileBatchObject, Error<GetVectorStoreFileBatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let batch_id = params.batch_id;

    debug!("Calling get_vector_store_file_batch...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/file_batches/{batch_id}",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id),
        batch_id = crate::apis::urlencode(batch_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVectorStoreFileBatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_files_in_vector_store_batch(
    configuration: &configuration::Configuration, params: ListFilesInVectorStoreBatchParams,
) -> Result<models::ListVectorStoreFilesResponse, Error<ListFilesInVectorStoreBatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let batch_id = params.batch_id;
    let limit = params.limit;
    let order = params.order;
    let after = params.after;
    let before = params.before;
    let filter = params.filter;

    debug!("Calling list_files_in_vector_store_batch...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/file_batches/{batch_id}/files",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id),
        batch_id = crate::apis::urlencode(batch_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder =
            local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder =
            local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListFilesInVectorStoreBatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_vector_store_files(
    configuration: &configuration::Configuration, params: ListVectorStoreFilesParams,
) -> Result<models::ListVectorStoreFilesResponse, Error<ListVectorStoreFilesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let limit = params.limit;
    let order = params.order;
    let after = params.after;
    let before = params.before;
    let filter = params.filter;

    debug!("Calling list_vector_store_files...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}/files",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder =
            local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder =
            local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVectorStoreFilesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_vector_stores(
    configuration: &configuration::Configuration, params: ListVectorStoresParams,
) -> Result<models::ListVectorStoresResponse, Error<ListVectorStoresError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let limit = params.limit;
    let order = params.order;
    let after = params.after;
    let before = params.before;

    debug!("Calling list_vector_stores...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/vector_stores", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = order {
        local_var_req_builder =
            local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder =
            local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVectorStoresError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn modify_vector_store(
    configuration: &configuration::Configuration, params: ModifyVectorStoreParams,
) -> Result<models::VectorStoreObject, Error<ModifyVectorStoreError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let vector_store_id = params.vector_store_id;
    let update_vector_store_request = params.update_vector_store_request;

    debug!("Calling modify_vector_store...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/vector_stores/{vector_store_id}",
        local_var_configuration.base_path,
        vector_store_id = crate::apis::urlencode(vector_store_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_vector_store_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ModifyVectorStoreError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
