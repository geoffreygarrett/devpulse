/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};
/// struct for passing parameters to the method [`cancel_batch`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CancelBatchParams {
    /// The ID of the batch to cancel.
    pub batch_id: String,
}

impl CancelBatchParams {
    pub fn builder() -> CancelBatchParamsBuilder {
        CancelBatchParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`create_batch`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateBatchParams {
    pub create_batch_request: models::CreateBatchRequest,
}

impl CreateBatchParams {
    pub fn builder() -> CreateBatchParamsBuilder {
        CreateBatchParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`list_batches`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct ListBatchesParams {
    /// A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
    pub after: Option<String>,
    /// A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
    pub limit: Option<i32>,
}

impl ListBatchesParams {
    pub fn builder() -> ListBatchesParamsBuilder {
        ListBatchesParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`retrieve_batch`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct RetrieveBatchParams {
    /// The ID of the batch to retrieve.
    pub batch_id: String,
}

impl RetrieveBatchParams {
    pub fn builder() -> RetrieveBatchParamsBuilder {
        RetrieveBatchParamsBuilder::default()
    }
}

/// struct for typed errors of method [`cancel_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateBatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_batches`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListBatchesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`retrieve_batch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetrieveBatchError {
    UnknownValue(serde_json::Value),
}

#[tracing::instrument]
pub async fn cancel_batch(
    configuration: &configuration::Configuration, params: CancelBatchParams,
) -> Result<models::Batch, Error<CancelBatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let batch_id = params.batch_id;

    debug!("Calling cancel_batch...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/batches/{batch_id}/cancel",
        local_var_configuration.base_path,
        batch_id = crate::apis::urlencode(batch_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelBatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn create_batch(
    configuration: &configuration::Configuration, params: CreateBatchParams,
) -> Result<models::Batch, Error<CreateBatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_batch_request = params.create_batch_request;

    debug!("Calling create_batch...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/batches", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_batch_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateBatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn list_batches(
    configuration: &configuration::Configuration, params: ListBatchesParams,
) -> Result<models::ListBatchesResponse, Error<ListBatchesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let after = params.after;
    let limit = params.limit;

    debug!("Calling list_batches...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/batches", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListBatchesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn retrieve_batch(
    configuration: &configuration::Configuration, params: RetrieveBatchParams,
) -> Result<models::Batch, Error<RetrieveBatchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let batch_id = params.batch_id;

    debug!("Calling retrieve_batch...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/batches/{batch_id}",
        local_var_configuration.base_path,
        batch_id = crate::apis::urlencode(batch_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RetrieveBatchError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
