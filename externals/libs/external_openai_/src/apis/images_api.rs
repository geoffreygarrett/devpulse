/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};
/// struct for passing parameters to the method [`create_image`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateImageParams {
    pub create_image_request: models::CreateImageRequest,
}

impl CreateImageParams {
    pub fn builder() -> CreateImageParamsBuilder {
        CreateImageParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`create_image_edit`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateImageEditParams {
    /// The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
    pub image: std::path::PathBuf,
    /// A text description of the desired image(s). The maximum length is 1000 characters.
    pub prompt: String,
    /// An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
    pub mask: Option<std::path::PathBuf>,
    pub model: Option<models::CreateImageEditRequestModel>,
    /// The number of images to generate. Must be between 1 and 10.
    pub n: Option<i32>,
    /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    pub size: Option<String>,
    /// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    pub response_format: Option<String>,
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    pub user: Option<String>,
}

impl CreateImageEditParams {
    pub fn builder() -> CreateImageEditParamsBuilder {
        CreateImageEditParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`create_image_variation`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateImageVariationParams {
    /// The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
    pub image: std::path::PathBuf,
    pub model: Option<models::CreateImageEditRequestModel>,
    /// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
    pub n: Option<i32>,
    /// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
    pub response_format: Option<String>,
    /// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
    pub size: Option<String>,
    /// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
    pub user: Option<String>,
}

impl CreateImageVariationParams {
    pub fn builder() -> CreateImageVariationParamsBuilder {
        CreateImageVariationParamsBuilder::default()
    }
}

/// struct for typed errors of method [`create_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateImageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_image_edit`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateImageEditError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_image_variation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateImageVariationError {
    UnknownValue(serde_json::Value),
}

#[tracing::instrument]
pub async fn create_image(
    configuration: &configuration::Configuration, params: CreateImageParams,
) -> Result<models::ImagesResponse, Error<CreateImageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_image_request = params.create_image_request;

    debug!("Calling create_image...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/images/generations", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_image_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateImageError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn create_image_edit(
    configuration: &configuration::Configuration, params: CreateImageEditParams,
) -> Result<models::ImagesResponse, Error<CreateImageEditError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let image = params.image;
    let prompt = params.prompt;
    let mask = params.mask;
    let model = params.model;
    let n = params.n;
    let size = params.size;
    let response_format = params.response_format;
    let user = params.user;

    debug!("Calling create_image_edit...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/images/edits", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'image' parameter
    local_var_form = local_var_form.text("prompt", prompt.to_string());
    // TODO: support file upload for 'mask' parameter
    if let Some(local_var_param_value) = model {
        local_var_form = local_var_form.text("model", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = n {
        local_var_form = local_var_form.text("n", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = size {
        local_var_form = local_var_form.text("size", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = response_format {
        local_var_form = local_var_form.text("response_format", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user {
        local_var_form = local_var_form.text("user", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateImageEditError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn create_image_variation(
    configuration: &configuration::Configuration, params: CreateImageVariationParams,
) -> Result<models::ImagesResponse, Error<CreateImageVariationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let image = params.image;
    let model = params.model;
    let n = params.n;
    let response_format = params.response_format;
    let size = params.size;
    let user = params.user;

    debug!("Calling create_image_variation...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/images/variations", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'image' parameter
    if let Some(local_var_param_value) = model {
        local_var_form = local_var_form.text("model", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = n {
        local_var_form = local_var_form.text("n", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = response_format {
        local_var_form = local_var_form.text("response_format", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = size {
        local_var_form = local_var_form.text("size", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user {
        local_var_form = local_var_form.text("user", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateImageVariationError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
