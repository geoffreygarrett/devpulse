/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};

#[macro_export]
macro_rules! generate_pulls_api_client_methods {
    () => {
        /// pulls_slash_create method
        pub async fn pulls_slash_create(
            &self, params: PullsSlashCreateParams,
        ) -> Result<models::PullRequest, Error<PullsSlashCreateError>> {
            let result = crate::apis::pulls_api::pulls_slash_create(&self.config, params).await?;
            Ok(result)
        }
        /// pulls_slash_get method
        pub async fn pulls_slash_get(
            &self, params: PullsSlashGetParams,
        ) -> Result<models::PullRequest, Error<PullsSlashGetError>> {
            let result = crate::apis::pulls_api::pulls_slash_get(&self.config, params).await?;
            Ok(result)
        }
        /// pulls_slash_list method
        pub async fn pulls_slash_list(
            &self, params: PullsSlashListParams,
        ) -> Result<Vec<models::PullRequestSimple>, Error<PullsSlashListError>> {
            let result = crate::apis::pulls_api::pulls_slash_list(&self.config, params).await?;
            Ok(result)
        }
    };
}

#[macro_export]
macro_rules! generate_pulls_api_client {
    () => {
        use cached::SizedCache;
        use reqwest::Client;
        use std::sync::Arc;

        pub struct PullsApi<'a> {
            config: &'a Arc<configuration::Configuration>,
            client: Client,
        }

        impl<'a> PullsApi<'a> {
            pub fn new(config: &'a Arc<configuration::Configuration>) -> Self {
                PullsApi {
                    config,
                    client: Client::new(),
                }
            }
            /// pulls_slash_create method
            pub async fn create(
                &self, params: PullsSlashCreateParams,
            ) -> Result<models::PullRequest, Error<PullsSlashCreateError>> {
                let result =
                    crate::apis::pulls_api::pulls_slash_create(&self.config, params).await?;
                Ok(result)
            }
            /// pulls_slash_get method
            pub async fn get(
                &self, params: PullsSlashGetParams,
            ) -> Result<models::PullRequest, Error<PullsSlashGetError>> {
                let result = crate::apis::pulls_api::pulls_slash_get(&self.config, params).await?;
                Ok(result)
            }
            /// pulls_slash_list method
            pub async fn list(
                &self, params: PullsSlashListParams,
            ) -> Result<Vec<models::PullRequestSimple>, Error<PullsSlashListError>> {
                let result = crate::apis::pulls_api::pulls_slash_list(&self.config, params).await?;
                Ok(result)
            }
        }
    };
}

/// struct for passing parameters to the method [`pulls_slash_create`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct PullsSlashCreateParams {
    /// The account owner of the repository. The name is not case sensitive.
    pub owner: String,
    /// The name of the repository without the `.git` extension. The name is not case sensitive.
    pub repo: String,
    pub pulls_create_request: models::PullsCreateRequest,
}

impl PullsSlashCreateParams {
    pub fn builder() -> PullsSlashCreateParamsBuilder {
        PullsSlashCreateParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`pulls_slash_get`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct PullsSlashGetParams {
    /// The account owner of the repository. The name is not case sensitive.
    pub owner: String,
    /// The name of the repository without the `.git` extension. The name is not case sensitive.
    pub repo: String,
    /// The number that identifies the pull request.
    pub pull_number: i32,
}

impl PullsSlashGetParams {
    pub fn builder() -> PullsSlashGetParamsBuilder {
        PullsSlashGetParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`pulls_slash_list`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct PullsSlashListParams {
    /// The account owner of the repository. The name is not case sensitive.
    pub owner: String,
    /// The name of the repository without the `.git` extension. The name is not case sensitive.
    pub repo: String,
    /// Either `open`, `closed`, or `all` to filter by state.
    pub state: Option<String>,
    /// Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
    pub head: Option<String>,
    /// Filter pulls by base branch name. Example: `gh-pages`.
    pub base: Option<String>,
    /// What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.
    pub sort: Option<String>,
    /// The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
    pub direction: Option<String>,
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub per_page: Option<i32>,
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub page: Option<i32>,
}

impl PullsSlashListParams {
    pub fn builder() -> PullsSlashListParamsBuilder {
        PullsSlashListParamsBuilder::default()
    }
}

/// struct for typed errors of method [`pulls_slash_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullsSlashCreateError {
    Status403(models::BasicError),
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pulls_slash_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullsSlashGetError {
    Status404(models::BasicError),
    Status406(models::BasicError),
    Status500(models::BasicError),
    Status503(models::ReposGetCommit503Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`pulls_slash_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PullsSlashListError {
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https:/
#[tracing::instrument]
pub async fn pulls_slash_create(
    configuration: &configuration::Configuration, params: PullsSlashCreateParams,
) -> Result<models::PullRequest, Error<PullsSlashCreateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let owner = params.owner;
    let repo = params.repo;
    let pulls_create_request = params.pulls_create_request;

    debug!("Calling pulls_slash_create...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/repos/{owner}/{repo}/pulls",
        local_var_configuration.base_path,
        owner = crate::apis::urlencode(owner),
        repo = crate::apis::urlencode(repo)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&pulls_create_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PullsSlashCreateError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https:/
#[tracing::instrument]
pub async fn pulls_slash_get(
    configuration: &configuration::Configuration, params: PullsSlashGetParams,
) -> Result<models::PullRequest, Error<PullsSlashGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let owner = params.owner;
    let repo = params.repo;
    let pull_number = params.pull_number;

    debug!("Calling pulls_slash_get...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/repos/{owner}/{repo}/pulls/{pull_number}",
        local_var_configuration.base_path,
        owner = crate::apis::urlencode(owner),
        repo = crate::apis::urlencode(repo),
        pull_number = pull_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PullsSlashGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists pull requests in a specified repository.  Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For m
#[tracing::instrument]
pub async fn pulls_slash_list(
    configuration: &configuration::Configuration, params: PullsSlashListParams,
) -> Result<Vec<models::PullRequestSimple>, Error<PullsSlashListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let owner = params.owner;
    let repo = params.repo;
    let state = params.state;
    let head = params.head;
    let base = params.base;
    let sort = params.sort;
    let direction = params.direction;
    let per_page = params.per_page;
    let page = params.page;

    debug!("Calling pulls_slash_list...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/repos/{owner}/{repo}/pulls",
        local_var_configuration.base_path,
        owner = crate::apis::urlencode(owner),
        repo = crate::apis::urlencode(repo)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = state {
        local_var_req_builder =
            local_var_req_builder.query(&[("state", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = head {
        local_var_req_builder =
            local_var_req_builder.query(&[("head", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = base {
        local_var_req_builder =
            local_var_req_builder.query(&[("base", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = direction {
        local_var_req_builder =
            local_var_req_builder.query(&[("direction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PullsSlashListError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
