/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};

#[macro_export]
macro_rules! generate_orgs_api_client_methods {
    () => {
        /// orgs_slash_get method
        pub async fn orgs_slash_get(
            &self, params: OrgsSlashGetParams,
        ) -> Result<models::OrganizationFull, Error<OrgsSlashGetError>> {
            let result = crate::apis::orgs_api::orgs_slash_get(&self.config, params).await?;
            Ok(result)
        }
        /// orgs_slash_list_for_authenticated_user method
        pub async fn orgs_slash_list_for_authenticated_user(
            &self, params: OrgsSlashListForAuthenticatedUserParams,
        ) -> Result<Vec<models::OrganizationSimple>, Error<OrgsSlashListForAuthenticatedUserError>>
        {
            let result =
                crate::apis::orgs_api::orgs_slash_list_for_authenticated_user(&self.config, params)
                    .await?;
            Ok(result)
        }
        /// orgs_slash_list_members method
        pub async fn orgs_slash_list_members(
            &self, params: OrgsSlashListMembersParams,
        ) -> Result<Vec<models::SimpleUser>, Error<OrgsSlashListMembersError>> {
            let result =
                crate::apis::orgs_api::orgs_slash_list_members(&self.config, params).await?;
            Ok(result)
        }
    };
}

#[macro_export]
macro_rules! generate_orgs_api_client {
    () => {
        use cached::SizedCache;
        use reqwest::Client;
        use std::sync::Arc;

        pub struct OrgsApi<'a> {
            config: &'a Arc<configuration::Configuration>,
            client: Client,
        }

        impl<'a> OrgsApi<'a> {
            pub fn new(config: &'a Arc<configuration::Configuration>) -> Self {
                OrgsApi {
                    config,
                    client: Client::new(),
                }
            }
            /// orgs_slash_get method
            pub async fn get(
                &self, params: OrgsSlashGetParams,
            ) -> Result<models::OrganizationFull, Error<OrgsSlashGetError>> {
                let result = crate::apis::orgs_api::orgs_slash_get(&self.config, params).await?;
                Ok(result)
            }
            /// orgs_slash_list_for_authenticated_user method
            pub async fn list_for_authenticated_user(
                &self, params: OrgsSlashListForAuthenticatedUserParams,
            ) -> Result<
                Vec<models::OrganizationSimple>,
                Error<OrgsSlashListForAuthenticatedUserError>,
            > {
                let result = crate::apis::orgs_api::orgs_slash_list_for_authenticated_user(
                    &self.config,
                    params,
                )
                .await?;
                Ok(result)
            }
            /// orgs_slash_list_members method
            pub async fn list_members(
                &self, params: OrgsSlashListMembersParams,
            ) -> Result<Vec<models::SimpleUser>, Error<OrgsSlashListMembersError>> {
                let result =
                    crate::apis::orgs_api::orgs_slash_list_members(&self.config, params).await?;
                Ok(result)
            }
        }
    };
}

/// struct for passing parameters to the method [`orgs_slash_get`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct OrgsSlashGetParams {
    /// The organization name. The name is not case sensitive.
    pub org: String,
}

impl OrgsSlashGetParams {
    pub fn builder() -> OrgsSlashGetParamsBuilder {
        OrgsSlashGetParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`orgs_slash_list_for_authenticated_user`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct OrgsSlashListForAuthenticatedUserParams {
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub per_page: Option<i32>,
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub page: Option<i32>,
}

impl OrgsSlashListForAuthenticatedUserParams {
    pub fn builder() -> OrgsSlashListForAuthenticatedUserParamsBuilder {
        OrgsSlashListForAuthenticatedUserParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`orgs_slash_list_members`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct OrgsSlashListMembersParams {
    /// The organization name. The name is not case sensitive.
    pub org: String,
    /// Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.
    pub filter: Option<String>,
    /// Filter members returned by their role.
    pub role: Option<String>,
    /// The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub per_page: Option<i32>,
    /// The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"
    pub page: Option<i32>,
}

impl OrgsSlashListMembersParams {
    pub fn builder() -> OrgsSlashListMembersParamsBuilder {
        OrgsSlashListMembersParamsBuilder::default()
    }
}

/// struct for typed errors of method [`orgs_slash_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashGetError {
    Status404(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_for_authenticated_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListForAuthenticatedUserError {
    Status401(models::BasicError),
    Status403(models::BasicError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orgs_slash_list_members`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrgsSlashListMembersError {
    Status422(models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// Gets information about an organization.  When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authe
#[tracing::instrument]
pub async fn orgs_slash_get(
    configuration: &configuration::Configuration, params: OrgsSlashGetParams,
) -> Result<models::OrganizationFull, Error<OrgsSlashGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org = params.org;

    debug!("Calling orgs_slash_get...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/orgs/{org}",
        local_var_configuration.base_path,
        org = crate::apis::urlencode(org)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OrgsSlashGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List organizations for the authenticated user.  For OAuth app tokens and personal access tokens (classic), this endpoint only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membersh
#[tracing::instrument]
pub async fn orgs_slash_list_for_authenticated_user(
    configuration: &configuration::Configuration, params: OrgsSlashListForAuthenticatedUserParams,
) -> Result<Vec<models::OrganizationSimple>, Error<OrgsSlashListForAuthenticatedUserError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let per_page = params.per_page;
    let page = params.page;

    debug!("Calling orgs_slash_list_for_authenticated_user...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/user/orgs", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OrgsSlashListForAuthenticatedUserError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
#[tracing::instrument]
pub async fn orgs_slash_list_members(
    configuration: &configuration::Configuration, params: OrgsSlashListMembersParams,
) -> Result<Vec<models::SimpleUser>, Error<OrgsSlashListMembersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let org = params.org;
    let filter = params.filter;
    let role = params.role;
    let per_page = params.per_page;
    let page = params.page;

    debug!("Calling orgs_slash_list_members...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/orgs/{org}/members",
        local_var_configuration.base_path,
        org = crate::apis::urlencode(org)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder =
            local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OrgsSlashListMembersError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
