/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder, Eq)]
#[builder(setter(strip_option, into), default)]
pub struct ContentDirectoryInner {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "size")]
    pub size: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "sha")]
    pub sha: String,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "git_url", deserialize_with = "Option::deserialize")]
    pub git_url: Option<String>,
    #[serde(rename = "html_url", deserialize_with = "Option::deserialize")]
    pub html_url: Option<String>,
    #[serde(rename = "download_url", deserialize_with = "Option::deserialize")]
    pub download_url: Option<String>,
    #[serde(rename = "_links")]
    pub _links: Box<models::ContentTreeEntriesInnerLinks>,
}

impl ContentDirectoryInner {
    pub fn new(
        r#type: Type, size: i32, name: String, path: String, sha: String, url: String,
        git_url: Option<String>, html_url: Option<String>, download_url: Option<String>,
        _links: models::ContentTreeEntriesInnerLinks,
    ) -> ContentDirectoryInner {
        ContentDirectoryInner {
            r#type,
            size,
            name,
            path,
            content: None,
            sha,
            url,
            git_url,
            html_url,
            download_url,
            _links: Box::new(_links),
        }
    }

    pub fn builder() -> ContentDirectoryInnerBuilder {
        ContentDirectoryInnerBuilder::create_empty()
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "dir")]
    Dir,
    #[serde(rename = "file")]
    File,
    #[serde(rename = "submodule")]
    Submodule,
    #[serde(rename = "symlink")]
    Symlink,
}

impl Default for Type {
    fn default() -> Type {
        Self::Dir
    }
}
