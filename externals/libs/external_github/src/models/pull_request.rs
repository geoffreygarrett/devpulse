/*
 * GitHub v3 REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.4
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

/// PullRequest : Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct PullRequest {
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "id")]
    pub id: i64,
    #[serde(rename = "node_id")]
    pub node_id: String,
    #[serde(rename = "html_url")]
    pub html_url: String,
    #[serde(rename = "diff_url")]
    pub diff_url: String,
    #[serde(rename = "patch_url")]
    pub patch_url: String,
    #[serde(rename = "issue_url")]
    pub issue_url: String,
    #[serde(rename = "commits_url")]
    pub commits_url: String,
    #[serde(rename = "review_comments_url")]
    pub review_comments_url: String,
    #[serde(rename = "review_comment_url")]
    pub review_comment_url: String,
    #[serde(rename = "comments_url")]
    pub comments_url: String,
    #[serde(rename = "statuses_url")]
    pub statuses_url: String,
    /// Number uniquely identifying the pull request within its repository.
    #[serde(rename = "number")]
    pub number: i32,
    /// State of this Pull Request. Either `open` or `closed`.
    #[serde(rename = "state")]
    pub state: State,
    #[serde(rename = "locked")]
    pub locked: bool,
    /// The title of the pull request.
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "user")]
    pub user: Box<models::SimpleUser>,
    #[serde(rename = "body", deserialize_with = "Option::deserialize")]
    pub body: Option<String>,
    #[serde(rename = "labels")]
    pub labels: Vec<models::PullRequestLabelsInner>,
    #[serde(rename = "milestone", deserialize_with = "Option::deserialize")]
    pub milestone: Option<Box<models::NullableMilestone>>,
    #[serde(
        rename = "active_lock_reason",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub active_lock_reason: Option<Option<String>>,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "closed_at", deserialize_with = "Option::deserialize")]
    pub closed_at: Option<String>,
    #[serde(rename = "merged_at", deserialize_with = "Option::deserialize")]
    pub merged_at: Option<String>,
    #[serde(rename = "merge_commit_sha", deserialize_with = "Option::deserialize")]
    pub merge_commit_sha: Option<String>,
    #[serde(rename = "assignee", deserialize_with = "Option::deserialize")]
    pub assignee: Option<Box<models::NullableSimpleUser>>,
    #[serde(
        rename = "assignees",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub assignees: Option<Option<Vec<models::SimpleUser>>>,
    #[serde(
        rename = "requested_reviewers",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_reviewers: Option<Option<Vec<models::SimpleUser>>>,
    #[serde(
        rename = "requested_teams",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub requested_teams: Option<Option<Vec<models::TeamSimple>>>,
    #[serde(rename = "head")]
    pub head: Box<models::PullRequestHead>,
    #[serde(rename = "base")]
    pub base: Box<models::PullRequestBase>,
    #[serde(rename = "_links")]
    pub _links: Box<models::PullRequestSimpleLinks>,
    #[serde(rename = "author_association")]
    pub author_association: models::AuthorAssociation,
    #[serde(rename = "auto_merge", deserialize_with = "Option::deserialize")]
    pub auto_merge: Option<Box<models::AutoMerge>>,
    /// Indicates whether or not the pull request is a draft.
    #[serde(rename = "draft", skip_serializing_if = "Option::is_none")]
    pub draft: Option<bool>,
    #[serde(rename = "merged")]
    pub merged: bool,
    #[serde(rename = "mergeable", deserialize_with = "Option::deserialize")]
    pub mergeable: Option<bool>,
    #[serde(
        rename = "rebaseable",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub rebaseable: Option<Option<bool>>,
    #[serde(rename = "mergeable_state")]
    pub mergeable_state: String,
    #[serde(rename = "merged_by", deserialize_with = "Option::deserialize")]
    pub merged_by: Option<Box<models::NullableSimpleUser>>,
    #[serde(rename = "comments")]
    pub comments: i32,
    #[serde(rename = "review_comments")]
    pub review_comments: i32,
    /// Indicates whether maintainers can modify the pull request.
    #[serde(rename = "maintainer_can_modify")]
    pub maintainer_can_modify: bool,
    #[serde(rename = "commits")]
    pub commits: i32,
    #[serde(rename = "additions")]
    pub additions: i32,
    #[serde(rename = "deletions")]
    pub deletions: i32,
    #[serde(rename = "changed_files")]
    pub changed_files: i32,
}

impl PullRequest {
    /// Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
    pub fn new(
        url: String, id: i64, node_id: String, html_url: String, diff_url: String,
        patch_url: String, issue_url: String, commits_url: String, review_comments_url: String,
        review_comment_url: String, comments_url: String, statuses_url: String, number: i32,
        state: State, locked: bool, title: String, user: models::SimpleUser, body: Option<String>,
        labels: Vec<models::PullRequestLabelsInner>, milestone: Option<models::NullableMilestone>,
        created_at: String, updated_at: String, closed_at: Option<String>,
        merged_at: Option<String>, merge_commit_sha: Option<String>,
        assignee: Option<models::NullableSimpleUser>, head: models::PullRequestHead,
        base: models::PullRequestBase, _links: models::PullRequestSimpleLinks,
        author_association: models::AuthorAssociation, auto_merge: Option<models::AutoMerge>,
        merged: bool, mergeable: Option<bool>, mergeable_state: String,
        merged_by: Option<models::NullableSimpleUser>, comments: i32, review_comments: i32,
        maintainer_can_modify: bool, commits: i32, additions: i32, deletions: i32,
        changed_files: i32,
    ) -> PullRequest {
        PullRequest {
            url,
            id,
            node_id,
            html_url,
            diff_url,
            patch_url,
            issue_url,
            commits_url,
            review_comments_url,
            review_comment_url,
            comments_url,
            statuses_url,
            number,
            state,
            locked,
            title,
            user: Box::new(user),
            body,
            labels,
            milestone: if let Some(x) = milestone {
                Some(Box::new(x))
            } else {
                None
            },
            active_lock_reason: None,
            created_at,
            updated_at,
            closed_at,
            merged_at,
            merge_commit_sha,
            assignee: if let Some(x) = assignee {
                Some(Box::new(x))
            } else {
                None
            },
            assignees: None,
            requested_reviewers: None,
            requested_teams: None,
            head: Box::new(head),
            base: Box::new(base),
            _links: Box::new(_links),
            author_association,
            auto_merge: if let Some(x) = auto_merge {
                Some(Box::new(x))
            } else {
                None
            },
            draft: None,
            merged,
            mergeable,
            rebaseable: None,
            mergeable_state,
            merged_by: if let Some(x) = merged_by {
                Some(Box::new(x))
            } else {
                None
            },
            comments,
            review_comments,
            maintainer_can_modify,
            commits,
            additions,
            deletions,
            changed_files,
        }
    }

    pub fn builder() -> PullRequestBuilder {
        PullRequestBuilder::create_empty()
    }
}
/// State of this Pull Request. Either `open` or `closed`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "closed")]
    Closed,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}
