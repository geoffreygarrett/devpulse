/*
 * Git
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};

#[macro_export]
macro_rules! generate_commits_api_client_methods {
    () => {
        /// commits_get method
        pub async fn commits_get(
            &self, params: CommitsGetParams,
        ) -> Result<models::GitCommit, Error<CommitsGetError>> {
            let result = crate::apis::commits_api::commits_get(&self.config, params).await?;
            Ok(result)
        }
        /// commits_get_changes method
        pub async fn commits_get_changes(
            &self, params: CommitsGetChangesParams,
        ) -> Result<models::GitCommitChanges, Error<CommitsGetChangesError>> {
            let result =
                crate::apis::commits_api::commits_get_changes(&self.config, params).await?;
            Ok(result)
        }
    };
}

#[macro_export]
macro_rules! generate_commits_api_client {
    () => {
        use cached::SizedCache;
        use reqwest::Client;
        use std::sync::Arc;

        pub struct CommitsApi<'a> {
            config: &'a Arc<configuration::Configuration>,
            client: Client,
        }

        impl<'a> CommitsApi<'a> {
            pub fn new(config: &'a Arc<configuration::Configuration>) -> Self {
                CommitsApi {
                    config,
                    client: Client::new(),
                }
            }
            /// commits_get method
            pub async fn get(
                &self, params: CommitsGetParams,
            ) -> Result<models::GitCommit, Error<CommitsGetError>> {
                let result = crate::apis::commits_api::commits_get(&self.config, params).await?;
                Ok(result)
            }
            /// commits_get_changes method
            pub async fn get_changes(
                &self, params: CommitsGetChangesParams,
            ) -> Result<models::GitCommitChanges, Error<CommitsGetChangesError>> {
                let result =
                    crate::apis::commits_api::commits_get_changes(&self.config, params).await?;
                Ok(result)
            }
        }
    };
}

/// struct for passing parameters to the method [`commits_get`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct CommitsGetParams {
    /// The name of the Azure DevOps organization.
    pub organization: String,
    /// The id of the commit.
    pub commit_id: String,
    /// The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    pub repository_id: String,
    /// Project ID or project name
    pub project: String,
    /// Version of the API to use.  This should be set to '7.1-preview.1' to use this version of the api.
    pub api_version: String,
    /// The number of changes to include in the result.
    pub change_count: Option<i32>,
}

impl CommitsGetParams {
    pub fn builder() -> CommitsGetParamsBuilder {
        CommitsGetParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`commits_get_changes`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct CommitsGetChangesParams {
    /// The name of the Azure DevOps organization.
    pub organization: String,
    /// The id of the commit.
    pub commit_id: String,
    /// The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    pub repository_id: String,
    /// Project ID or project name
    pub project: String,
    /// Version of the API to use.  This should be set to '7.1-preview.1' to use this version of the api.
    pub api_version: String,
    /// The maximum number of changes to return.
    pub top: Option<i32>,
    /// The number of changes to skip.
    pub skip: Option<i32>,
}

impl CommitsGetChangesParams {
    pub fn builder() -> CommitsGetChangesParamsBuilder {
        CommitsGetChangesParamsBuilder::default()
    }
}

/// struct for typed errors of method [`commits_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommitsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`commits_get_changes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommitsGetChangesError {
    UnknownValue(serde_json::Value),
}

/// Retrieve a particular commit.
#[tracing::instrument]
pub async fn commits_get(
    configuration: &configuration::Configuration, params: CommitsGetParams,
) -> Result<models::GitCommit, Error<CommitsGetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let organization = params.organization;
    let commit_id = params.commit_id;
    let repository_id = params.repository_id;
    let project = params.project;
    let api_version = params.api_version;
    let change_count = params.change_count;

    debug!("Calling commits_get...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}",
        local_var_configuration.base_path,
        organization = crate::apis::urlencode(organization),
        commitId = crate::apis::urlencode(commit_id),
        repositoryId = crate::apis::urlencode(repository_id),
        project = crate::apis::urlencode(project)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = change_count {
        local_var_req_builder =
            local_var_req_builder.query(&[("changeCount", &local_var_str.to_string())]);
    }
    local_var_req_builder =
        local_var_req_builder.query(&[("api-version", &api_version.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CommitsGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve changes for a particular commit.
#[tracing::instrument]
pub async fn commits_get_changes(
    configuration: &configuration::Configuration, params: CommitsGetChangesParams,
) -> Result<models::GitCommitChanges, Error<CommitsGetChangesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let organization = params.organization;
    let commit_id = params.commit_id;
    let repository_id = params.repository_id;
    let project = params.project;
    let api_version = params.api_version;
    let top = params.top;
    let skip = params.skip;

    debug!("Calling commits_get_changes...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/changes", local_var_configuration.base_path, organization=crate::apis::urlencode(organization), commitId=crate::apis::urlencode(commit_id), repositoryId=crate::apis::urlencode(repository_id), project=crate::apis::urlencode(project));
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = top {
        local_var_req_builder = local_var_req_builder.query(&[("top", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = skip {
        local_var_req_builder =
            local_var_req_builder.query(&[("skip", &local_var_str.to_string())]);
    }
    local_var_req_builder =
        local_var_req_builder.query(&[("api-version", &api_version.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CommitsGetChangesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
