/*
 * Git
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

/// GitCommit :
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct GitCommit {
    #[serde(rename = "treeId", skip_serializing_if = "Option::is_none")]
    pub tree_id: Option<String>,
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::ReferenceLinks>>,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<models::GitUserDate>>,
    #[serde(rename = "changeCounts", skip_serializing_if = "Option::is_none")]
    pub change_counts: Option<Box<models::ChangeCountDictionary>>,
    /// An enumeration of the changes included with the commit.
    #[serde(rename = "changes", skip_serializing_if = "Option::is_none")]
    pub changes: Option<Vec<models::GitChange>>,
    /// Comment or message of the commit.
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    /// Indicates if the comment is truncated from the full Git commit comment message.
    #[serde(rename = "commentTruncated", skip_serializing_if = "Option::is_none")]
    pub comment_truncated: Option<bool>,
    /// ID (SHA-1) of the commit.
    #[serde(rename = "commitId", skip_serializing_if = "Option::is_none")]
    pub commit_id: Option<String>,
    #[serde(rename = "committer", skip_serializing_if = "Option::is_none")]
    pub committer: Option<Box<models::GitUserDate>>,
    /// Indicates that commit contains too many changes to be displayed
    #[serde(
        rename = "commitTooManyChanges",
        skip_serializing_if = "Option::is_none"
    )]
    pub commit_too_many_changes: Option<bool>,
    /// An enumeration of the parent commit IDs for this commit.
    #[serde(rename = "parents", skip_serializing_if = "Option::is_none")]
    pub parents: Option<Vec<String>>,
    #[serde(rename = "push", skip_serializing_if = "Option::is_none")]
    pub push: Option<Box<models::GitPushRef>>,
    /// Remote URL path to the commit.
    #[serde(rename = "remoteUrl", skip_serializing_if = "Option::is_none")]
    pub remote_url: Option<String>,
    /// A list of status metadata from services and extensions that may associate additional information to the commit.
    #[serde(rename = "statuses", skip_serializing_if = "Option::is_none")]
    pub statuses: Option<Vec<models::GitStatus>>,
    /// REST URL for this resource.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// A list of workitems associated with this commit.
    #[serde(rename = "workItems", skip_serializing_if = "Option::is_none")]
    pub work_items: Option<Vec<models::ResourceRef>>,
}

impl GitCommit {
    ///
    pub fn new() -> GitCommit {
        GitCommit {
            tree_id: None,
            _links: None,
            author: None,
            change_counts: None,
            changes: None,
            comment: None,
            comment_truncated: None,
            commit_id: None,
            committer: None,
            commit_too_many_changes: None,
            parents: None,
            push: None,
            remote_url: None,
            statuses: None,
            url: None,
            work_items: None,
        }
    }

    pub fn builder() -> GitCommitBuilder {
        GitCommitBuilder::create_empty()
    }
}
