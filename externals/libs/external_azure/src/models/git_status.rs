/*
 * Git
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 7.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

/// GitStatus : This class contains the metadata of a service/extension posting a status.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct GitStatus {
    #[serde(rename = "_links", skip_serializing_if = "Option::is_none")]
    pub _links: Option<Box<models::ReferenceLinks>>,
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<models::GitStatusContext>>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<models::IdentityRef>>,
    /// Creation date and time of the status.
    #[serde(rename = "creationDate", skip_serializing_if = "Option::is_none")]
    pub creation_date: Option<String>,
    /// Status description. Typically describes current state of the status.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Status identifier.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// State of the status.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// URL with status details.
    #[serde(rename = "targetUrl", skip_serializing_if = "Option::is_none")]
    pub target_url: Option<String>,
    /// Last update date and time of the status.
    #[serde(rename = "updatedDate", skip_serializing_if = "Option::is_none")]
    pub updated_date: Option<String>,
}

impl GitStatus {
    /// This class contains the metadata of a service/extension posting a status.
    pub fn new() -> GitStatus {
        GitStatus {
            _links: None,
            context: None,
            created_by: None,
            creation_date: None,
            description: None,
            id: None,
            state: None,
            target_url: None,
            updated_date: None,
        }
    }

    pub fn builder() -> GitStatusBuilder {
        GitStatusBuilder::create_empty()
    }
}
/// State of the status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "notSet")]
    NotSet,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "succeeded")]
    Succeeded,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "notApplicable")]
    NotApplicable,
}

impl Default for State {
    fn default() -> State {
        Self::NotSet
    }
}
