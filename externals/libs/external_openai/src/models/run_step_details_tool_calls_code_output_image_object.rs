/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use derive_builder::Builder;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize, Builder)]
#[builder(setter(strip_option, into), default)]
pub struct RunStepDetailsToolCallsCodeOutputImageObject {
    /// Always `image`.
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "image")]
    pub image: Box<models::RunStepDetailsToolCallsCodeOutputImageObjectImage>,
}

impl RunStepDetailsToolCallsCodeOutputImageObject {
    pub fn new(
        r#type: Type, image: models::RunStepDetailsToolCallsCodeOutputImageObjectImage,
    ) -> RunStepDetailsToolCallsCodeOutputImageObject {
        RunStepDetailsToolCallsCodeOutputImageObject {
            r#type,
            image: Box::new(image),
        }
    }

    pub fn builder() -> RunStepDetailsToolCallsCodeOutputImageObjectBuilder {
        RunStepDetailsToolCallsCodeOutputImageObjectBuilder::create_empty()
    }
}
/// Always `image`.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "image")]
    Image,
}

impl Default for Type {
    fn default() -> Type {
        Self::Image
    }
}
