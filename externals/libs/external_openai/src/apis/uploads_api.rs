/*
 * OpenAI API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use super::configuration;
pub use super::Error;
use crate::{apis::ResponseContent, models};
use cached::proc_macro::cached;
use cached::Cached;
use cached::SizedCache;
use derive_builder::Builder;
use reqwest;
use serde::{Deserialize, Serialize};
use tracing::{debug, error, info, trace, warn};

#[macro_export]
macro_rules! generate_uploads_api_client_methods {
    () => {
        /// add_upload_part method
        pub async fn add_upload_part(
            &self, params: AddUploadPartParams,
        ) -> Result<models::UploadPart, Error<AddUploadPartError>> {
            let result = crate::apis::uploads_api::add_upload_part(&self.config, params).await?;
            Ok(result)
        }
        /// cancel_upload method
        pub async fn cancel_upload(
            &self, params: CancelUploadParams,
        ) -> Result<models::Upload, Error<CancelUploadError>> {
            let result = crate::apis::uploads_api::cancel_upload(&self.config, params).await?;
            Ok(result)
        }
        /// complete_upload method
        pub async fn complete_upload(
            &self, params: CompleteUploadParams,
        ) -> Result<models::Upload, Error<CompleteUploadError>> {
            let result = crate::apis::uploads_api::complete_upload(&self.config, params).await?;
            Ok(result)
        }
        /// create_upload method
        pub async fn create_upload(
            &self, params: CreateUploadParams,
        ) -> Result<models::Upload, Error<CreateUploadError>> {
            let result = crate::apis::uploads_api::create_upload(&self.config, params).await?;
            Ok(result)
        }
    };
}

#[macro_export]
macro_rules! generate_uploads_api_client {
    () => {
        use cached::SizedCache;
        use reqwest::Client;
        use std::sync::Arc;

        pub struct UploadsApi<'a> {
            config: &'a Arc<configuration::Configuration>,
            client: Client,
        }

        impl<'a> UploadsApi<'a> {
            pub fn new(config: &'a Arc<configuration::Configuration>) -> Self {
                UploadsApi {
                    config,
                    client: Client::new(),
                }
            }
            /// add_upload_part method
            pub async fn adduploadpart(
                &self, params: AddUploadPartParams,
            ) -> Result<models::UploadPart, Error<AddUploadPartError>> {
                let result =
                    crate::apis::uploads_api::add_upload_part(&self.config, params).await?;
                Ok(result)
            }
            /// cancel_upload method
            pub async fn cancelupload(
                &self, params: CancelUploadParams,
            ) -> Result<models::Upload, Error<CancelUploadError>> {
                let result = crate::apis::uploads_api::cancel_upload(&self.config, params).await?;
                Ok(result)
            }
            /// complete_upload method
            pub async fn completeupload(
                &self, params: CompleteUploadParams,
            ) -> Result<models::Upload, Error<CompleteUploadError>> {
                let result =
                    crate::apis::uploads_api::complete_upload(&self.config, params).await?;
                Ok(result)
            }
            /// create_upload method
            pub async fn createupload(
                &self, params: CreateUploadParams,
            ) -> Result<models::Upload, Error<CreateUploadError>> {
                let result = crate::apis::uploads_api::create_upload(&self.config, params).await?;
                Ok(result)
            }
        }
    };
}

/// struct for passing parameters to the method [`add_upload_part`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct AddUploadPartParams {
    /// The ID of the Upload.
    pub upload_id: String,
    /// The chunk of bytes for this Part.
    pub data: std::path::PathBuf,
}

impl AddUploadPartParams {
    pub fn builder() -> AddUploadPartParamsBuilder {
        AddUploadPartParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`cancel_upload`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct CancelUploadParams {
    /// The ID of the Upload.
    pub upload_id: String,
}

impl CancelUploadParams {
    pub fn builder() -> CancelUploadParamsBuilder {
        CancelUploadParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`complete_upload`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct CompleteUploadParams {
    /// The ID of the Upload.
    pub upload_id: String,
    pub complete_upload_request: models::CompleteUploadRequest,
}

impl CompleteUploadParams {
    pub fn builder() -> CompleteUploadParamsBuilder {
        CompleteUploadParamsBuilder::default()
    }
}

/// struct for passing parameters to the method [`create_upload`]
#[derive(Clone, Debug, Builder, Default, Serialize, PartialEq)]
#[builder(setter(strip_option, into), default)]
pub struct CreateUploadParams {
    pub create_upload_request: models::CreateUploadRequest,
}

impl CreateUploadParams {
    pub fn builder() -> CreateUploadParamsBuilder {
        CreateUploadParamsBuilder::default()
    }
}

/// struct for typed errors of method [`add_upload_part`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddUploadPartError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cancel_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelUploadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`complete_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompleteUploadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateUploadError {
    UnknownValue(serde_json::Value),
}

#[tracing::instrument]
pub async fn add_upload_part(
    configuration: &configuration::Configuration, params: AddUploadPartParams,
) -> Result<models::UploadPart, Error<AddUploadPartError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let upload_id = params.upload_id;
    let data = params.data;

    debug!("Calling add_upload_part...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/uploads/{upload_id}/parts",
        local_var_configuration.base_path,
        upload_id = crate::apis::urlencode(upload_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'data' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AddUploadPartError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn cancel_upload(
    configuration: &configuration::Configuration, params: CancelUploadParams,
) -> Result<models::Upload, Error<CancelUploadError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let upload_id = params.upload_id;

    debug!("Calling cancel_upload...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/uploads/{upload_id}/cancel",
        local_var_configuration.base_path,
        upload_id = crate::apis::urlencode(upload_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelUploadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn complete_upload(
    configuration: &configuration::Configuration, params: CompleteUploadParams,
) -> Result<models::Upload, Error<CompleteUploadError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let upload_id = params.upload_id;
    let complete_upload_request = params.complete_upload_request;

    debug!("Calling complete_upload...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/uploads/{upload_id}/complete",
        local_var_configuration.base_path,
        upload_id = crate::apis::urlencode(upload_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&complete_upload_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CompleteUploadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

#[tracing::instrument]
pub async fn create_upload(
    configuration: &configuration::Configuration, params: CreateUploadParams,
) -> Result<models::Upload, Error<CreateUploadError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_upload_request = params.create_upload_request;

    debug!("Calling create_upload...");

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/uploads", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_upload_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateUploadError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
